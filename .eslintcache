[{"K:\\React project\\foofaq\\src\\index.js":"1","K:\\React project\\foofaq\\src\\pages\\QuestionDetail\\index.js":"2","K:\\React project\\foofaq\\src\\pages\\QuestionCreateForm\\index.js":"3","K:\\React project\\foofaq\\src\\pages\\EventList\\index.js":"4","K:\\React project\\foofaq\\src\\pages\\QuestionCategoryList\\index.js":"5","K:\\React project\\foofaq\\src\\pages\\QuestionManager\\index.js":"6","K:\\React project\\foofaq\\src\\components\\CategoriesGridView\\index.js":"7","K:\\React project\\foofaq\\src\\pages\\FormManager\\index.js":"8","K:\\React project\\foofaq\\src\\components\\QuestionGridViewManager\\index.js":"9","K:\\React project\\foofaq\\src\\components\\EventsGridViewManager\\index.js":"10","K:\\React project\\foofaq\\src\\provider\\login-sample.js":"11","K:\\React project\\foofaq\\src\\components\\FormManager\\Jobs.js":"12","K:\\React project\\foofaq\\src\\helpers\\index.js":"13","K:\\React project\\foofaq\\src\\components\\QuestionInfoDetail\\index.js":"14","K:\\React project\\foofaq\\src\\components\\QuestionForm\\index.js":"15","K:\\React project\\foofaq\\src\\components\\QuestionCard\\index.js":"16","K:\\React project\\foofaq\\src\\components\\NavigationBar\\index.js":"17","K:\\React project\\foofaq\\src\\components\\Dialog\\index.js":"18","K:\\React project\\foofaq\\src\\common\\PageLayout\\index.js":"19","K:\\React project\\foofaq\\src\\components\\AdvancedFilter\\index.js":"20","K:\\React project\\foofaq\\src\\pages\\QuestionList\\index.js":"21","K:\\React project\\foofaq\\src\\components\\CategoriesGridViewManager\\index.js":"22","K:\\React project\\foofaq\\src\\components\\JobsGridViewManager\\index.js":"23","K:\\React project\\foofaq\\src\\common\\CustomLink.js":"24","K:\\React project\\foofaq\\src\\components\\FormManager\\Event.js":"25","K:\\React project\\foofaq\\src\\components\\AnswerForm\\index.js":"26","K:\\React project\\foofaq\\src\\components\\EventSearchBar\\index.js":"27","K:\\React project\\foofaq\\src\\components\\SearchBar\\index.js":"28","K:\\React project\\foofaq\\src\\components\\NavigationBar\\NavTag\\index.js":"29","K:\\React project\\foofaq\\src\\pages\\QuestionApproval\\index.js":"30","K:\\React project\\foofaq\\src\\components\\JobsGridView\\index.js":"31","K:\\React project\\foofaq\\src\\components\\FormManager\\Categories.js":"32","K:\\React project\\foofaq\\src\\components\\QuestionApprovalCard\\index.js":"33","K:\\React project\\foofaq\\src\\components\\QuestionAnswerDetail\\index.js":"34","K:\\React project\\foofaq\\src\\components\\EventCard\\index.js":"35","K:\\React project\\foofaq\\src\\components\\CategoryCard\\index.js":"36"},{"size":3156,"mtime":1607524142706,"results":"37","hashOfConfig":"38"},{"size":1891,"mtime":1607089018994,"results":"39","hashOfConfig":"38"},{"size":538,"mtime":1607423253954,"results":"40","hashOfConfig":"38"},{"size":2154,"mtime":1607429379383,"results":"41","hashOfConfig":"38"},{"size":2360,"mtime":1607423253954,"results":"42","hashOfConfig":"38"},{"size":1879,"mtime":1607517300864,"results":"43","hashOfConfig":"38"},{"size":1315,"mtime":1607517300859,"results":"44","hashOfConfig":"38"},{"size":1210,"mtime":1607517300864,"results":"45","hashOfConfig":"38"},{"size":4575,"mtime":1607517300863,"results":"46","hashOfConfig":"38"},{"size":1993,"mtime":1607517300860,"results":"47","hashOfConfig":"38"},{"size":2894,"mtime":1606740735103,"results":"48","hashOfConfig":"38"},{"size":5332,"mtime":1607423253946,"results":"49","hashOfConfig":"38"},{"size":4801,"mtime":1607517300863,"results":"50","hashOfConfig":"38"},{"size":6559,"mtime":1607089018986,"results":"51","hashOfConfig":"38"},{"size":7304,"mtime":1607423253950,"results":"52","hashOfConfig":"38"},{"size":5288,"mtime":1607695005388,"results":"53","hashOfConfig":"38"},{"size":7619,"mtime":1607694105475,"results":"54","hashOfConfig":"38"},{"size":1929,"mtime":1607423253941,"results":"55","hashOfConfig":"38"},{"size":409,"mtime":1607519315778,"results":"56","hashOfConfig":"38"},{"size":4037,"mtime":1607691748317,"results":"57","hashOfConfig":"38"},{"size":5617,"mtime":1607697676285,"results":"58","hashOfConfig":"38"},{"size":718,"mtime":1607517300860,"results":"59","hashOfConfig":"38"},{"size":1106,"mtime":1607517300861,"results":"60","hashOfConfig":"38"},{"size":497,"mtime":1606193299327,"results":"61","hashOfConfig":"38"},{"size":4523,"mtime":1607423253946,"results":"62","hashOfConfig":"38"},{"size":1319,"mtime":1607089018974,"results":"63","hashOfConfig":"38"},{"size":1609,"mtime":1607429379382,"results":"64","hashOfConfig":"38"},{"size":530,"mtime":1607423253952,"results":"65","hashOfConfig":"38"},{"size":2118,"mtime":1607089018983,"results":"66","hashOfConfig":"38"},{"size":782,"mtime":1607517300864,"results":"67","hashOfConfig":"38"},{"size":2278,"mtime":1607517300861,"results":"68","hashOfConfig":"38"},{"size":3605,"mtime":1607423253945,"results":"69","hashOfConfig":"38"},{"size":8480,"mtime":1607517300862,"results":"70","hashOfConfig":"38"},{"size":2624,"mtime":1607089018984,"results":"71","hashOfConfig":"38"},{"size":1640,"mtime":1607429379381,"results":"72","hashOfConfig":"38"},{"size":1001,"mtime":1607089018975,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"77"},"moc9th",{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"77"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"77"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"77"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"77"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"77"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"109"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"77"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"77"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"K:\\React project\\foofaq\\src\\index.js",["160"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, compose, applyMiddleware } from \"redux\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport Login from \"./pages/Login\";\r\n\r\nimport \"./index.scss\";\r\n\r\nimport reducer from \"./reducers/index\";\r\nimport QuestionList from \"./pages/QuestionList\";\r\nimport QuestionApproval from \"./pages/QuestionApproval\";\r\nimport QuestionDetail from \"./pages/QuestionDetail\";\r\n\r\nimport CategoriesGridViewManager from \"./components/CategoriesGridViewManager\";\r\nimport CategoriesGridView from \"./components/CategoriesGridView\";\r\n\r\nimport EventsGridViewManager from \"./components/EventsGridViewManager\";\r\nimport EventList from \"./pages/EventList\";\r\nimport JobsGridViewManager from \"./components/JobsGridViewManager\";\r\nimport JobsGridView from \"./components/JobsGridView\";\r\n//import QuestionApprovalDetail from \"./components/QuetionAprovalDetail\";\r\nimport QuestionCreateForm from \"./pages/QuestionCreateForm\";\r\n// import QuestionApprovalCard from \"./components/QuestionApprovalCard\";\r\n// import CategoriesManager from \"./components/CategoriesManager\";\r\nimport Managers from \"./pages/QuestionManager\";\r\n// import CategoriesForm from \"./components/FormManager/Categories\";\r\n// import QuestionApprovalDetail from \"./components/QuetionAprovalDetail\";\r\nimport QuestionCategoryList from \"./pages/QuestionCategoryList\";\r\nimport FormManager from \"./pages/FormManager\";\r\n\r\nimport QuestionGridViewManager from \"./components/QuestionGridViewManager\";\r\nconst composeEnhancers =\r\n  (typeof window !== \"undefined\" &&\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\r\n  compose;\r\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path=\"/login\" component={Login}></Route>\r\n\r\n        <Route exact path=\"/\" component={QuestionList}></Route>\r\n        <Route path=\"/detail\" component={QuestionDetail}></Route>\r\n        <Route path=\"/approval\" component={QuestionApproval}></Route>\r\n\r\n        <Route path=\"/form\" component={QuestionCreateForm}></Route>\r\n        <Route path=\"/category\" component={QuestionCategoryList}></Route>\r\n        <Route path=\"/manager/\" component={Managers}></Route>\r\n        <Route path=\"/forms/\" component={FormManager}></Route>\r\n        {/* <Route path=\"/events\" component={EventList}></Route> */}\r\n        <Route path=\"/griddemo\" component={QuestionGridViewManager}></Route>\r\n        <Route path=\"/events\" component={EventList}></Route>\r\n        <Route path=\"/categories\" component={CategoriesGridView}></Route>\r\n        <Route\r\n          path=\"/categories-manager\"\r\n          component={CategoriesGridViewManager}\r\n        ></Route>\r\n        <Route path=\"/jobmanger\" component={JobsGridViewManager}></Route>\r\n        <Route path=\"/jobgrid\" component={JobsGridView}></Route>\r\n        {/* <Route path=\"/griddemo\" component={QuestionGridViewManager}></Route> */}\r\n      </Switch>\r\n    </Router>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n",["161","162"],"K:\\React project\\foofaq\\src\\pages\\QuestionDetail\\index.js",[],"K:\\React project\\foofaq\\src\\pages\\QuestionCreateForm\\index.js",[],"K:\\React project\\foofaq\\src\\pages\\EventList\\index.js",[],"K:\\React project\\foofaq\\src\\pages\\QuestionCategoryList\\index.js",["163"],"import React, { useEffect, useState } from \"react\";\r\nimport CategoryCard from \"../../components/CategoryCard\";\r\nimport axios from \"axios\";\r\n\r\n//components\r\nimport PageLayout from \"../../common/PageLayout\";\r\nimport { Grid, makeStyles, Paper, Container } from \"@material-ui/core\";\r\nimport NavTag from \"../../components/NavigationBar/NavTag\";\r\nimport SearchBar from \"../../components/SearchBar\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\nfunction CategoryList() {\r\n  const classes = useStyles();\r\n  const [categories, setCategories] = useState(null);\r\n  const [keyword, setKeyword] = useState(\"\");\r\n  const [key, setKey] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const res = await axios.get(\r\n        `https://5fc48ee536bc790016343a0b.mockapi.io/categories?search=${key}&page=1&limit=4`\r\n      );\r\n      console.log(res.data);\r\n      setCategories(res.data);\r\n    })();\r\n  }, [key]);\r\n\r\n  const handleChangeSearch = (e) => {\r\n    setKeyword(e.target.value);\r\n  };\r\n  const handleSearch = () => {\r\n    setKey(keyword);\r\n  };\r\n\r\n  return (\r\n    <PageLayout outsideContainer={<NavTag />}>\r\n        <SearchBar\r\n          handleChangeSearch={handleChangeSearch}\r\n          handleSearch={handleSearch}\r\n        />\r\n        <Grid container className={classes.root} spacing={2}>\r\n          {categories ? (\r\n            categories.map((category) => (\r\n              <Grid item xs={3} key={category.id}>\r\n                <CategoryCard category={category} className={classes.root} />\r\n              </Grid>\r\n            ))\r\n          ) : (\r\n            <Grid container spacing={3} className={classes.root}>\r\n              <Grid item xs={3}>\r\n                <Paper className={classes.paper}></Paper>\r\n              </Grid>\r\n              <Grid item xs={3}>\r\n                <Paper className={classes.paper}></Paper>\r\n              </Grid>\r\n              <Grid item xs={3}>\r\n                <Paper className={classes.paper}></Paper>\r\n              </Grid>\r\n              <Grid item xs={3}>\r\n                <Paper className={classes.paper}></Paper>\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n        </Grid>\r\n    </PageLayout>\r\n  );\r\n}\r\n\r\nexport default CategoryList;\r\n","K:\\React project\\foofaq\\src\\pages\\QuestionManager\\index.js",[],"K:\\React project\\foofaq\\src\\components\\CategoriesGridView\\index.js",[],"K:\\React project\\foofaq\\src\\pages\\FormManager\\index.js",[],"K:\\React project\\foofaq\\src\\components\\QuestionGridViewManager\\index.js",["164","165","166","167"],"import React, { useEffect, useState } from \"react\";\r\nimport { DataGrid } from \"@material-ui/data-grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Link from \"../../common/CustomLink\";\r\nimport { getAllQuesiton, declineQuestion } from \"../../helpers\";\r\nimport SearchBar from \"../SearchBar\";\r\nimport moment from \"moment\";\r\n\r\nfunction QuestionGridViewManager() {\r\n  let columns = [\r\n    {\r\n      field: \"id\",\r\n      headerName: \"#ID\",\r\n      width: 150,\r\n      renderCell: (params) => <strong>{params.value}</strong>,\r\n    },\r\n    {\r\n      field: \"title\",\r\n      headerName: \"Title\",\r\n      width: 150,\r\n      renderCell: (params) => <strong>{params.value}</strong>,\r\n    },\r\n\r\n    {\r\n      field: \"tag\",\r\n      headerName: \"Categories\",\r\n      width: 150,\r\n      renderCell: (params) => <strong>{params.value}</strong>,\r\n    },\r\n    {\r\n      field: \"point\",\r\n      headerName: \"Vote\",\r\n      width: 150,\r\n      renderCell: (params) => <strong>{params.value}</strong>,\r\n    },\r\n    {\r\n      field: \"views\",\r\n      headerName: \"Views\",\r\n      width: 150,\r\n      renderCell: (params) => <strong>{params.value}</strong>,\r\n    },\r\n    {\r\n      field: \"answers\",\r\n      headerName: \"Answers\",\r\n      width: 150,\r\n      renderCell: (params) => <strong>5</strong>,\r\n    },\r\n    {\r\n      field: \"createdAt\",\r\n      headerName: \"Date\",\r\n      width: 150,\r\n      renderCell: (params) => <strong>{moment(params.value).fromNow()}</strong>,\r\n    },\r\n    {\r\n      field: \"users\",\r\n      headerName: \"Author\",\r\n      width: 150,\r\n      renderCell: (params) => <strong> Black Panther </strong>,\r\n    },\r\n\r\n    {\r\n      field: \"status\",\r\n      headerName: \"Status\",\r\n      width: 150,\r\n      renderCell: (params) => {\r\n        if (params.value === true) {\r\n          return (\r\n            <strong\r\n              style={{\r\n                color: \"Green\",\r\n              }}\r\n            >\r\n              Approval\r\n            </strong>\r\n          );\r\n        } else {\r\n          return (\r\n            <strong\r\n              style={{\r\n                color: \"red\",\r\n              }}\r\n            >\r\n              Not Approval\r\n            </strong>\r\n          );\r\n        }\r\n      },\r\n    },\r\n    {\r\n      field: \"action\",\r\n      headerName: \"Action\",\r\n      width: 180,\r\n\r\n      renderCell: (params) => (\r\n        <strong>\r\n          {/* <Link to={`/form/${params.value}`}>  </Link> */}\r\n          <Button variant=\"contained\" color=\"primary\" size=\"small\">\r\n            EDIT\r\n          </Button>\r\n\r\n          <Button\r\n            // onClick={() => {\r\n            //   handleDeleteQuestion(params.value);\r\n            // }}\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            size=\"small\"\r\n            style={{ marginLeft: 16 }}\r\n          >\r\n            DELETE\r\n          </Button>\r\n        </strong>\r\n      ),\r\n    },\r\n    {\r\n      field: \"detail\",\r\n      headerName: \"Internship diary \",\r\n      width: 150,\r\n      renderCell: (params) => (\r\n        <strong>\r\n          {\" \"}\r\n          <Link to={`/detail/${params.value}`}> See detail</Link>{\" \"}\r\n        </strong>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const [data, setData] = useState([]);\r\n  const [rows, setRows] = useState([]);\r\n  const [keyword, setKeyword] = useState(\"\");\r\n  const [key, setKey] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const question = await getAllQuesiton(key);\r\n      setData(question);\r\n    })();\r\n  }, [key]);\r\n\r\n  useEffect(() => {\r\n    setRows(data);\r\n    console.log(data);\r\n  }, [data]);\r\n\r\n  const handleDeleteQuestion = (id) => {\r\n    declineQuestion(id);\r\n  };\r\n  //   columns = extraColumns ? [...columns, ...extraColumns] : columns;\r\n  //   rows = extraRows ? [...rows, ...extraRows] : rows;\r\n  const handleChangeSearch = (e) => {\r\n    setKeyword(e.target.value);\r\n  };\r\n  const handleSearch = () => {\r\n    setKey(keyword);\r\n  };\r\n  return (\r\n    <div>\r\n      {/* <SearchBar\r\n        handleChangeSearch={handleChangeSearch}\r\n        handleSearch={handleSearch}\r\n      ></SearchBar> */}\r\n      {/* <Link to={`/form/`}>\r\n        <Button\r\n          style={{ margin: \"50px\" }}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          size=\"small\"\r\n        >\r\n          Add question\r\n        </Button>\r\n      </Link> */}\r\n      <div style={{ height: \"400px\", width: \"100%\" }}>\r\n        <DataGrid\r\n          rows={rows}\r\n          columns={columns}\r\n          pageSize={5}\r\n          rowsPerPageOptions={[5, 10, 20]}\r\n          pagination\r\n          {...data}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default QuestionGridViewManager;\r\n","K:\\React project\\foofaq\\src\\components\\EventsGridViewManager\\index.js",["168"],"import React,{useState,useEffect} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { DataGrid } from \"@material-ui/data-grid\";\r\nimport axios from \"axios\";\r\nimport \"./index.scss\";\r\nimport Link from \"../../common/CustomLink\";\r\n// import EventsGridView from \"../EventsGridView\";\r\n\r\nlet columns = [\r\n  { field: 'id'},\r\n  // { field: 'createdAt', width: 210 },\r\n  { field: 'name', width: 200 },\r\n  { field: 'imageUri', width: 110,\r\n    renderCell: (params) => (\r\n      <strong>\r\n        <div className=\"aroundImageEvents\">\r\n        <img src={params.value} alt=\"hehe\"/>\r\n        </div>\r\n      </strong>\r\n    ), },\r\n  // { field: 'date', width: 210 },\r\n  { field: 'description', width: 500 },\r\n  // { field: 'place', width: 150 },\r\n  {\r\n    field: \"Action\",\r\n    width: 200,\r\n    renderCell: (params) => (\r\n      <strong>\r\n        <Button variant=\"contained\" color=\"primary\" size=\"small\">\r\n          Edit\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          size=\"small\"\r\n          style={{ marginLeft: 16 }}\r\n        >\r\n          Delete\r\n        </Button>\r\n      </strong>\r\n    ),\r\n  }\r\n];\r\n\r\n// let rows = [\r\n//   {\r\n//     id: 1,\r\n//     date: new Date(1979, 0, 1),\r\n//   },\r\n//   {\r\n//     id: 2,\r\n//     date: new Date(1984, 1, 1),\r\n//   },\r\n//   {\r\n//     id: 3,\r\n//     date: new Date(1992, 2, 1),\r\n//   },\r\n// ];\r\n\r\n\r\nfunction EventsGridViewManager() {\r\n  const [data, setData] = useState([]);\r\n  useEffect(() => {\r\n  (async () => {\r\n    const categoryData = await axios.get('https://5fc9a56e3c1c220016440eab.mockapi.io/events')\r\n    setData(categoryData.data);\r\n  })();\r\n}, []);\r\nlet rows = data;\r\n  console.log(data);\r\n  return (\r\n    <div style={{ height: 600, width: \"100%\" }}>\r\n      <DataGrid rows={rows} columns={columns}\r\n      pageSize={6}\r\n      rowsPerPageOptions={[5, 10, 20]}\r\n      pagination\r\n      {...rows}\r\n         rowHeight={80}\r\n      />\r\n    </div>\r\n  )\r\n}\r\nexport default EventsGridViewManager;","K:\\React project\\foofaq\\src\\provider\\login-sample.js",["169"],"// import\r\nimport FacebookLogin from \"react-facebook-login/dist/facebook-login-render-props\";\r\nimport GoogleLogin from \"react-google-login\";\r\nimport GitHubLogin from 'react-github-login';\r\n\r\n// icon\r\nimport GoogleIcon from \"../images/google_icon.svg\";\r\nimport FacebookIcon from \"../images/facebook_icon.svg\";\r\nimport GithubIcon from \"../images/githubicon.svg\";\r\n\r\n// export\r\nexport const GoogleLoginProvider = (props) => {\r\n  return (\r\n    <GoogleLogin\r\n      clientId=\"\" //TODO: write your key here\r\n      buttonText=\"Login\"\r\n      onSuccess={props.handlerLogin}\r\n      onFailure={props.handlerLogin}\r\n      cookiePolicy={\"single_host_origin\"}\r\n      render={(renderProps) => (\r\n        <button\r\n          onClick={renderProps.onClick}\r\n          disabled={renderProps.disabled}\r\n          className=\"gg-login-btn\"\r\n        >\r\n          <span className=\"icon-wrapper\">\r\n            <span\r\n              className=\"icon\"\r\n              style={{\r\n                backgroundImage: `url(${GoogleIcon})`,\r\n              }}\r\n            ></span>\r\n          </span>\r\n          <span className=\"text\">Google</span>\r\n        </button>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport const FacebookLoginProvider = (props) => {\r\n  return (\r\n    <FacebookLogin\r\n      appId=\"\" //TODO: write your key here\r\n      textButton=\"FACEBOOK\"\r\n      fields=\"name,email,picture\"\r\n      callback={props.handlerLogin}\r\n      render={(renderProps) => (\r\n        <button\r\n          className=\"fb-login-btn\"\r\n          onClick={renderProps.onClick}\r\n          disabled={renderProps.disabled}\r\n        >\r\n          <span className=\"icon-wrapper\">\r\n            <span\r\n              className=\"icon\"\r\n              style={{\r\n                backgroundImage: `url(${FacebookIcon})`,\r\n              }}\r\n            ></span>\r\n          </span>\r\n          <span className=\"text\">Facebook</span>\r\n        </button>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport const GithubLoginProvider = (props) => {\r\n  return(\r\n    <GitHubLogin \r\n      clientId=\"\" //TODO: write your key here\r\n      redirectUri=\"\" \r\n      scope=\"repo\"\r\n      onSuccess={props.handlerLogin}\r\n      onFailure={props.handlerLogin}\r\n      className=\"git-login-btn\"\r\n    >\r\n      <span className=\"icon-wrapper\">\r\n        <span\r\n          className=\"icon\"\r\n          style={{\r\n            backgroundImage: `url(${GithubIcon})`,\r\n          }}\r\n        ></span>\r\n      </span>\r\n      <span className=\"text\">Github</span>\r\n    </GitHubLogin>\r\n    );\r\n};\r\n\r\nconst LoginProvider = ({ type, handlerLogin }) => {\r\n  switch (type) {\r\n    case \"gg\":\r\n    case \"google\":\r\n      return <GoogleLoginProvider handlerLogin={handlerLogin} />;\r\n    case \"fb\":\r\n    case \"facebook\":\r\n      return <FacebookLoginProvider handlerLogin={handlerLogin} />;\r\n    case \"git\":\r\n    case \"github\":\r\n      return <GithubLoginProvider handlerLogin={handlerLogin} />;\r\n  }\r\n};\r\n\r\nexport default LoginProvider;\r\n","K:\\React project\\foofaq\\src\\components\\FormManager\\Jobs.js",["170","171","172","173"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport \"./Jos.scss\";\r\nimport { getJob, addJobs, updateJobs } from \"../../helpers\";\r\n\r\nfunction Jobs(props) {\r\n  const [open, setOpen] = React.useState(false);\r\n  // name, description, type, area, company, experience, role\r\n  const [job, setJob] = useState([]);\r\n  const [name, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [type, setType] = useState(\"\");\r\n  const [area, setArea] = useState(\"\");\r\n  const [company, setCompany] = useState(\"\");\r\n  const [experience, setExperience] = useState(\"\");\r\n  const [role, setRole] = useState(\"\");\r\n  let { id } = useParams();\r\n\r\n  let handleSubmit = (event) => {\r\n    event.preventDefault();\r\n  };\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n  useEffect(() => {\r\n    (async () => {\r\n      const questionData = await getJob(id);\r\n      setJob(questionData);\r\n    })();\r\n  }, []);\r\n  if (id === undefined) {\r\n    handleSubmit = (event) => {\r\n      event.preventDefault();\r\n      addJobs(name, description, type, area, company, experience, role)\r\n        .then(function (response) {\r\n          setOpen(true);\r\n          //window.location.reload();\r\n        })\r\n        .catch(function (error) {\r\n          // handle error\r\n          console.log(error);\r\n        });\r\n    };\r\n  } else {\r\n    handleSubmit = (event) => {\r\n      event.preventDefault();\r\n      updateJobs(id, name, description, type, area, company, experience, role)\r\n        .then(function (response) {\r\n          setOpen(true);\r\n          window.location.reload();\r\n        })\r\n        .catch(function (error) {\r\n          // handle error\r\n          console.log(error);\r\n        });\r\n    };\r\n  }\r\n  return (\r\n    <div>\r\n      <h1>Jobs Form</h1>\r\n      <ul className=\"form-style-1\">\r\n        <li>\r\n          <label>\r\n            Jobs Name <span className=\"required\">*</span>\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"field1\"\r\n            className=\"field-divided\"\r\n            placeholder=\"name\"\r\n            defaultValue={job.name}\r\n            onChange={(e) => {\r\n              setName(e.target.value);\r\n            }}\r\n          />{\" \"}\r\n        </li>\r\n        <li>\r\n          <label>\r\n            Type <span className=\"required\">*</span>\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"field3\"\r\n            className=\"field-long\"\r\n            defaultValue={job.type}\r\n            onChange={(e) => {\r\n              setType(e.target.value);\r\n            }}\r\n          />\r\n        </li>\r\n        <li>\r\n          <label>\r\n            Area <span className=\"required\">*</span>\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"field3\"\r\n            className=\"field-long\"\r\n            defaultValue={job.area}\r\n            onChange={(e) => {\r\n              setArea(e.target.value);\r\n            }}\r\n          />\r\n        </li>\r\n        <li>\r\n          <label>\r\n            Company <span className=\"required\">*</span>\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"field3\"\r\n            className=\"field-long\"\r\n            defaultValue={job.company}\r\n            onChange={(e) => {\r\n              setCompany(e.target.value);\r\n            }}\r\n          />\r\n        </li>\r\n        <li>\r\n          <label>\r\n            experience <span className=\"required\">*</span>\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"field3\"\r\n            className=\"field-long\"\r\n            defaultValue={job.experience}\r\n            onChange={(e) => {\r\n              setExperience(e.target.value);\r\n            }}\r\n          />\r\n        </li>\r\n\r\n        <li>\r\n          <label>\r\n            Role <span className=\"required\">*</span>\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"field3\"\r\n            className=\"field-long\"\r\n            defaultValue={job.role}\r\n            onChange={(e) => {\r\n              setRole(e.target.value);\r\n            }}\r\n          />\r\n        </li>\r\n\r\n        <li>\r\n          <label>\r\n            Description <span className=\"required\">*</span>\r\n          </label>\r\n          <textarea\r\n            name=\"field5\"\r\n            id=\"field5\"\r\n            className=\"field-long field-textarea\"\r\n            defaultValue={job.description}\r\n            onChange={(e) => {\r\n              setDescription(e.target.value);\r\n            }}\r\n          />\r\n        </li>\r\n        <li>\r\n          <Button onClick={handleSubmit} variant=\"outlined\" color=\"primary\">\r\n            {\" \"}\r\n            Send\r\n          </Button>\r\n        </li>\r\n      </ul>\r\n\r\n      <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"success\">\r\n          This is a success message!\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Jobs;\r\n","K:\\React project\\foofaq\\src\\helpers\\index.js",[],"K:\\React project\\foofaq\\src\\components\\QuestionInfoDetail\\index.js",[],["174","175"],"K:\\React project\\foofaq\\src\\components\\QuestionForm\\index.js",["176","177","178","179"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  EditorState,\r\n  convertToRaw,\r\n  ContentState,\r\n  convertFromHTML,\r\n} from \"draft-js\";\r\nimport { Editor } from \"react-draft-wysiwyg\";\r\nimport axios from \"axios\";\r\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./index.scss\";\r\n\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport MuiDialogContent from \"@material-ui/core/DialogContent\";\r\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport draftToMarkdown from \"draftjs-to-markdown\";\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(2),\r\n  },\r\n  closeButton: {\r\n    position: \"absolute\",\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton\r\n          aria-label=\"close\"\r\n          className={classes.closeButton}\r\n          onClick={onClose}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nfunction QuestionForm() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [question, setQuestion] = useState([]);\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const [title, setTitle] = useState(\"\");\r\n  const [tag, setTag] = useState(\"\");\r\n\r\n  const [editorState, setEditorState] = useState(EditorState.createEmpty());\r\n\r\n  let content = draftToMarkdown(convertToRaw(editorState.getCurrentContent()));\r\n\r\n  const [nofi, setNofi] = useState(\"\");\r\n  let handleSubmit = (event) => {\r\n    event.preventDefault();\r\n  };\r\n  const { id } = useParams();\r\n  if (id === undefined) {\r\n    handleSubmit = (event) => {\r\n      event.preventDefault();\r\n      questionPost();\r\n    };\r\n    const questionPost = () => {\r\n      axios\r\n        .post(\"https://5fc48ee536bc790016343a0b.mockapi.io/questions\", {\r\n          title: title,\r\n          tag: tag,\r\n          content: content,\r\n        })\r\n        .then(function (response) {\r\n          // handle success\r\n          setTitle(\"\");\r\n          setTag(\"\");\r\n          console.log(\"POST Successfully\");\r\n          setNofi(\"POST Successfully\");\r\n          setOpen(true);\r\n        })\r\n        .catch(function (error) {\r\n          // handle error\r\n          console.log(error);\r\n          setNofi(\"POST Failed\");\r\n          setOpen(true);\r\n        });\r\n    };\r\n  }\r\n\r\n  //Truong hop id co gia tri => PUT\r\n  else {\r\n    handleSubmit = (event) => {\r\n      event.preventDefault();\r\n      questionPut(id);\r\n    };\r\n    const questionPut = (id) => {\r\n      axios\r\n        .put(\"https://5fc48ee536bc790016343a0b.mockapi.io/questions/\" + id, {\r\n          title: title,\r\n          tag: tag,\r\n          content: content,\r\n        })\r\n        .then(function (response) {\r\n          // handle success\r\n          console.log(\"Successfully\");\r\n          setTitle(\"\");\r\n          setTag(\"\");\r\n          console.log(\"POST Successfully\");\r\n          setNofi(\"POST Successfully\");\r\n          setOpen(true);\r\n        })\r\n        .catch(function (error) {\r\n          // handle error\r\n          console.log(error);\r\n          console.log(error);\r\n          setNofi(\"POST Failed\");\r\n          setOpen(true);\r\n        });\r\n    };\r\n  }\r\n\r\n  // async function getQuestion() {\r\n  //   const response = await axios.get();\r\n  //   return response.data;\r\n  // }\r\n\r\n  useEffect(async () => {\r\n    const result = await axios(\r\n      `https://5fc48ee536bc790016343a0b.mockapi.io/questions/${id}`\r\n    );\r\n\r\n    setQuestion(result.data);\r\n  }, []);\r\n\r\n  // const sampleMarkup = `${question.id}`;\r\n  // const blocksFromHTML = convertFromHTML(sampleMarkup);\r\n  // const state = ContentState.createFromBlockArray(\r\n  //   blocksFromHTML.contentBlocks,\r\n  //   blocksFromHTML.entityMap\r\n  // );\r\n  const [editorStates, setEdittorStates] = useState(\r\n    EditorState.createWithContent(\r\n      ContentState.createFromBlockArray(convertFromHTML(`Hehehehe`))\r\n    )\r\n  );\r\n\r\n  console.log(\"question: \" + question.content);\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"questionForm\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"questionTitle\">\r\n              <b>Tiêu đề</b>\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"questionTitle\"\r\n              aria-describedby=\"questionTitle\"\r\n              placeholder=\"Nhập tiêu đề câu hỏi...\"\r\n              onChange={(e) => {\r\n                setTitle(e.target.value);\r\n              }}\r\n              defaultValue={question.title}\r\n            />\r\n          </div>\r\n          <label htmlFor=\"aroundEditorQuestion\">\r\n            <b>Nội dung</b>\r\n          </label>\r\n          <div className=\"aroundEditorQuestion\" id=\"aroundEditorQuestion\">\r\n            <Editor\r\n              wrapperClassName=\"demo-wrapper\"\r\n              editorClassName=\"demo-editor\"\r\n              onEditorStateChange={setEditorState}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"questionTag\">\r\n              <b>Thẻ</b>\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"questionTag\"\r\n              aria-describedby=\"questionTag\"\r\n              placeholder=\"Nhập thẻ liên quan đến câu hỏi...\"\r\n              defaultValue={question.tag}\r\n              onChange={(e) => {\r\n                setTag(e.target.value);\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"aroundBtnQuestion\">\r\n            <input type=\"submit\" className=\"btn btn-success\" value=\"Đăng\" />\r\n          </div>\r\n        </div>\r\n        <Dialog\r\n          onClose={handleClose}\r\n          aria-labelledby=\"customized-dialog-title\"\r\n          open={open}\r\n        >\r\n          <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n            Post Successfully\r\n          </DialogTitle>\r\n          <DialogContent dividers>\r\n            <Typography gutterBottom>{nofi}</Typography>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button autoFocus onClick={handleClose} color=\"primary\">\r\n              OK\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuestionForm;\r\n",["180","181"],"K:\\React project\\foofaq\\src\\components\\QuestionCard\\index.js",["182"],"K:\\React project\\foofaq\\src\\components\\NavigationBar\\index.js",[],"K:\\React project\\foofaq\\src\\components\\Dialog\\index.js",["183"],"import Button from \"@material-ui/core/Button\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\n\r\nexport const DialogDecline = (props) => {\r\n  let id;\r\n  return (\r\n    <Dialog\r\n      open={props.decline}\r\n      onClose={props.handleCloseDecline}\r\n      aria-labelledby=\"alert-dialog-title\"\r\n      aria-describedby=\"alert-dialog-description\"\r\n    >\r\n      <DialogTitle id=\"alert-dialog-title\">\r\n        {\"Are you sure to decline ?\"}\r\n      </DialogTitle>\r\n\r\n      <DialogActions>\r\n        <Button onClick={props.handleCloseDecline} color=\"primary\">\r\n          Disagree\r\n        </Button>\r\n        <Button onClick={props.handleOpentDecline} color=\"primary\" autoFocus>\r\n          Decline\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport const DialogFeedback = (props) => {\r\n  return (\r\n    <Dialog\r\n      open={props.feedback}\r\n      onClose={props.handleFeedBack}\r\n      aria-labelledby=\"form-dialog-title\"\r\n    >\r\n      <DialogTitle id=\"form-dialog-title\">\r\n        Decline post an give feedback\r\n      </DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText>You can feedback here.</DialogContentText>\r\n        <TextField\r\n          autoFocus\r\n          margin=\"dense\"\r\n          id=\"name\"\r\n          label=\"Feedback\"\r\n          type=\"text\"\r\n          fullWidth\r\n        />\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={props.handleFeedBack} color=\"primary\">\r\n          Cancel\r\n        </Button>\r\n        <Button onClick={props.handleOpenFeedBack} color=\"primary\">\r\n          Feedback\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n","K:\\React project\\foofaq\\src\\common\\PageLayout\\index.js",[],"K:\\React project\\foofaq\\src\\components\\AdvancedFilter\\index.js",["184"],"import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\n// MUI components\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n// icons\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(1),\r\n    maxWidth: 800,\r\n    margin: \"1rem auto\",\r\n  },\r\n}));\r\n\r\nconst AdvancedFilter = ({ handleSearch }) => {\r\n  const classes = useStyles();\r\n\r\n  const [filter, setFilter] = useState(\"all\");\r\n  const [sortBy, setSortBy] = useState(\"newest\");\r\n  const [categories, setCategories] = useState([]);\r\n\r\n  const handleFilterChange = (event) => {\r\n    setFilter(event.target.value);\r\n  };\r\n\r\n  const handleSortByChange = (event) => {\r\n    setSortBy(event.target.value);\r\n  };\r\n\r\n  const handleClick = () => {\r\n    let params = '';\r\n    if (filter !== 'all') params += `filterBy=${filter}&`;\r\n    params += `sortBy=${sortBy}`;\r\n    if (categories.length) params += `categories=${categories}`;\r\n    alert(params);\r\n    handleSearch(params);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={4}>\r\n            <FormControl component=\"fieldset\">\r\n              <FormLabel component=\"legend\">Filter By</FormLabel>\r\n              <RadioGroup\r\n                aria-label=\"filter\"\r\n                name=\"filter\"\r\n                value={filter}\r\n                onChange={handleFilterChange}\r\n              >\r\n                <FormControlLabel\r\n                  value=\"all\"\r\n                  control={<Radio />}\r\n                  label=\"All\"\r\n                />\r\n                <FormControlLabel\r\n                  value=\"answered\"\r\n                  control={<Radio />}\r\n                  label=\"Answered\"\r\n                />\r\n                <FormControlLabel\r\n                  value=\"noAnswer\"\r\n                  control={<Radio />}\r\n                  label=\"No Answer\"\r\n                />\r\n              </RadioGroup>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <FormControl component=\"fieldset\">\r\n              <FormLabel component=\"legend\">Sort By</FormLabel>\r\n              <RadioGroup\r\n                aria-label=\"sortBy\"\r\n                name=\"sortBy\"\r\n                value={sortBy}\r\n                onChange={handleSortByChange}\r\n              >\r\n                <FormControlLabel\r\n                  value=\"newest\"\r\n                  control={<Radio />}\r\n                  label=\"Newest\"\r\n                />\r\n                <FormControlLabel\r\n                  value=\"mostVote\"\r\n                  control={<Radio />}\r\n                  label=\"Most Vote\"\r\n                />\r\n                <FormControlLabel\r\n                  value=\"mostView\"\r\n                  control={<Radio />}\r\n                  label=\"Most View\"\r\n                />\r\n              </RadioGroup>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <FormControl component=\"fieldset\">\r\n              <FormLabel component=\"legend\">Categories</FormLabel>\r\n              <TextField id=\"standard-basic\" label=\"Categories\" />\r\n            </FormControl>\r\n          </Grid>\r\n        </Grid>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          className={classes.button}\r\n          startIcon={<SearchIcon />}\r\n          onClick={handleClick}\r\n        >\r\n          Search\r\n        </Button>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdvancedFilter;\r\n","K:\\React project\\foofaq\\src\\pages\\QuestionList\\index.js",[],"K:\\React project\\foofaq\\src\\components\\CategoriesGridViewManager\\index.js",[],"K:\\React project\\foofaq\\src\\components\\JobsGridViewManager\\index.js",["185","186"],"import * as React from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport JobsGridView from \"../JobsGridView\";\r\nimport { deleteJob } from \"../../helpers/index\";\r\nimport Link from \"../../common/CustomLink\";\r\nlet columns = [\r\n  {\r\n    field: \"action\",\r\n    headerName: \"Actions\",\r\n    headerAlign: \"center\",\r\n    width: 200,\r\n    renderCell: (params) => (\r\n      <strong>\r\n        {/* <Link to={`/forms/job/${params.value}`}>  </Link> */}\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          size=\"small\"\r\n          style={{ marginLeft: 16 }}\r\n          onClick={() => {}}\r\n        >\r\n          UPDATE\r\n        </Button>\r\n\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          size=\"small\"\r\n          style={{ marginLeft: 16 }}\r\n          onClick={() => {\r\n            // deleteJob();\r\n            // window.location.reload();\r\n          }}\r\n        >\r\n          DELETE\r\n        </Button>\r\n      </strong>\r\n    ),\r\n  },\r\n];\r\n\r\nexport default function JobsGridViewManager() {\r\n  return <JobsGridView extraColumns={columns} />;\r\n}\r\n","K:\\React project\\foofaq\\src\\common\\CustomLink.js",[],"K:\\React project\\foofaq\\src\\components\\FormManager\\Event.js",["187"],"import React, { useState, useEffect } from \"react\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport PhotoCamera from \"@material-ui/icons/PhotoCamera\";\r\n\r\nimport \"./Jos.scss\";\r\nimport { getEvent, addEvent, updateEvent } from \"../../helpers\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n}));\r\nfunction Events(props) {\r\n  const classes = useStyles();\r\n\r\n  const [open, setOpen] = useState(false);\r\n  // name, description, type, area, company, experience, role\r\n  const [event, setEvent] = useState([]);\r\n  const [name, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [image, setImage] = useState(\"\");\r\n  let date;\r\n  let { id } = useParams();\r\n\r\n  let handleSubmit = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n  useEffect(() => {\r\n    (async () => {\r\n      const eventData = await getEvent(id);\r\n      setEvent(eventData);\r\n    })();\r\n  }, []);\r\n  if (id === undefined) {\r\n    handleSubmit = (event) => {\r\n      event.preventDefault();\r\n      addEvent(name, image, date, description)\r\n        .then(function (response) {\r\n          setOpen(true);\r\n          window.location.reload();\r\n        })\r\n        .catch(function (error) {\r\n          // handle error\r\n          console.log(error);\r\n        });\r\n    };\r\n  } else {\r\n    handleSubmit = (event) => {\r\n      event.preventDefault();\r\n      updateEvent(id, name, image, date, description)\r\n        .then(function (response) {\r\n          setOpen(true);\r\n          window.location.reload();\r\n        })\r\n        .catch(function (error) {\r\n          // handle error\r\n          console.log(error);\r\n        });\r\n    };\r\n  }\r\n  console.log(event.name);\r\n  return (\r\n    <div>\r\n      <h1>Event Form</h1>\r\n      <ul className=\"form-style-1\">\r\n        <li>\r\n          <label>\r\n            Event Name <span className=\"required\">*</span>\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"field1\"\r\n            className=\"field-divided\"\r\n            placeholder=\"name\"\r\n            defaultValue={event.name}\r\n            onChange={(e) => {\r\n              setName(e.target.value);\r\n            }}\r\n          />{\" \"}\r\n        </li>\r\n\r\n        <li>\r\n          <input\r\n            accept=\"image/*\"\r\n            className={classes.input}\r\n            id=\"contained-button-file\"\r\n            multiple\r\n            type=\"file\"\r\n            onChange={(e) => {\r\n              setImage(e.target.value);\r\n            }}\r\n          />\r\n          <label htmlFor=\"contained-button-file\">\r\n            <Button variant=\"contained\" color=\"primary\" component=\"span\">\r\n              Upload\r\n            </Button>\r\n          </label>\r\n          <input\r\n            accept=\"image/*\"\r\n            className={classes.input}\r\n            id=\"icon-button-file\"\r\n            type=\"file\"\r\n            onChange={(e) => {\r\n              setImage(e.target.value);\r\n            }}\r\n          />\r\n          <label htmlFor=\"icon-button-file\">\r\n            <IconButton\r\n              color=\"primary\"\r\n              aria-label=\"upload picture\"\r\n              component=\"span\"\r\n            >\r\n              <PhotoCamera />\r\n            </IconButton>\r\n          </label>\r\n        </li>\r\n\r\n        <li>\r\n          <label>\r\n            Description <span className=\"required\">*</span>\r\n          </label>\r\n          <textarea\r\n            name=\"field5\"\r\n            id=\"field5\"\r\n            className=\"field-long field-textarea\"\r\n            defaultValue={event.description}\r\n            onChange={(e) => {\r\n              setDescription(e.target.value);\r\n            }}\r\n          />\r\n        </li>\r\n        <li>\r\n          <Button onClick={handleSubmit} variant=\"outlined\" color=\"primary\">\r\n            {\" \"}\r\n            Send\r\n          </Button>\r\n        </li>\r\n      </ul>\r\n\r\n      <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"success\">\r\n          This is a success message!\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Events;\r\n","K:\\React project\\foofaq\\src\\components\\AnswerForm\\index.js",[],"K:\\React project\\foofaq\\src\\components\\EventSearchBar\\index.js",[],"K:\\React project\\foofaq\\src\\components\\SearchBar\\index.js",[],"K:\\React project\\foofaq\\src\\components\\NavigationBar\\NavTag\\index.js",[],"K:\\React project\\foofaq\\src\\pages\\QuestionApproval\\index.js",[],"K:\\React project\\foofaq\\src\\components\\JobsGridView\\index.js",[],"K:\\React project\\foofaq\\src\\components\\FormManager\\Categories.js",["188"],"K:\\React project\\foofaq\\src\\components\\QuestionApprovalCard\\index.js",["189","190","191","192","193","194","195","196","197","198","199"],"K:\\React project\\foofaq\\src\\components\\QuestionAnswerDetail\\index.js",[],"K:\\React project\\foofaq\\src\\components\\EventCard\\index.js",[],"K:\\React project\\foofaq\\src\\components\\CategoryCard\\index.js",[],{"ruleId":"200","severity":1,"message":"201","line":21,"column":8,"nodeType":"202","messageId":"203","endLine":21,"endColumn":29},{"ruleId":"204","replacedBy":"205"},{"ruleId":"206","replacedBy":"207"},{"ruleId":"200","severity":1,"message":"208","line":7,"column":35,"nodeType":"202","messageId":"203","endLine":7,"endColumn":44},{"ruleId":"200","severity":1,"message":"209","line":6,"column":8,"nodeType":"202","messageId":"203","endLine":6,"endColumn":17},{"ruleId":"200","severity":1,"message":"210","line":145,"column":9,"nodeType":"202","messageId":"203","endLine":145,"endColumn":29},{"ruleId":"200","severity":1,"message":"211","line":150,"column":9,"nodeType":"202","messageId":"203","endLine":150,"endColumn":27},{"ruleId":"200","severity":1,"message":"212","line":153,"column":9,"nodeType":"202","messageId":"203","endLine":153,"endColumn":21},{"ruleId":"200","severity":1,"message":"213","line":6,"column":8,"nodeType":"202","messageId":"203","endLine":6,"endColumn":12},{"ruleId":"214","severity":1,"message":"215","line":93,"column":3,"nodeType":"216","messageId":"217","endLine":103,"endColumn":4},{"ruleId":"200","severity":1,"message":"218","line":2,"column":10,"nodeType":"202","messageId":"203","endLine":2,"endColumn":20},{"ruleId":"200","severity":1,"message":"219","line":3,"column":8,"nodeType":"202","messageId":"203","endLine":3,"endColumn":17},{"ruleId":"200","severity":1,"message":"220","line":4,"column":8,"nodeType":"202","messageId":"203","endLine":4,"endColumn":12},{"ruleId":"221","severity":1,"message":"222","line":40,"column":6,"nodeType":"223","endLine":40,"endColumn":8,"suggestions":"224"},{"ruleId":"204","replacedBy":"225"},{"ruleId":"206","replacedBy":"226"},{"ruleId":"221","severity":1,"message":"227","line":156,"column":13,"nodeType":"228","endLine":162,"endColumn":4},{"ruleId":"221","severity":1,"message":"222","line":162,"column":6,"nodeType":"223","endLine":162,"endColumn":8,"suggestions":"229"},{"ruleId":"200","severity":1,"message":"230","line":170,"column":10,"nodeType":"202","messageId":"203","endLine":170,"endColumn":22},{"ruleId":"200","severity":1,"message":"231","line":170,"column":24,"nodeType":"202","messageId":"203","endLine":170,"endColumn":40},{"ruleId":"204","replacedBy":"232"},{"ruleId":"206","replacedBy":"233"},{"ruleId":"200","severity":1,"message":"234","line":84,"column":5,"nodeType":"202","messageId":"203","endLine":84,"endColumn":10},{"ruleId":"200","severity":1,"message":"235","line":12,"column":7,"nodeType":"202","messageId":"203","endLine":12,"endColumn":9},{"ruleId":"200","severity":1,"message":"236","line":34,"column":22,"nodeType":"202","messageId":"203","endLine":34,"endColumn":35},{"ruleId":"200","severity":1,"message":"237","line":4,"column":10,"nodeType":"202","messageId":"203","endLine":4,"endColumn":19},{"ruleId":"200","severity":1,"message":"213","line":5,"column":8,"nodeType":"202","messageId":"203","endLine":5,"endColumn":12},{"ruleId":"221","severity":1,"message":"222","line":50,"column":6,"nodeType":"223","endLine":50,"endColumn":8,"suggestions":"238"},{"ruleId":"221","severity":1,"message":"222","line":47,"column":6,"nodeType":"223","endLine":47,"endColumn":8,"suggestions":"239"},{"ruleId":"200","severity":1,"message":"240","line":19,"column":10,"nodeType":"202","messageId":"203","endLine":19,"endColumn":23},{"ruleId":"200","severity":1,"message":"241","line":22,"column":24,"nodeType":"202","messageId":"203","endLine":22,"endColumn":39},{"ruleId":"200","severity":1,"message":"242","line":22,"column":41,"nodeType":"202","messageId":"203","endLine":22,"endColumn":56},{"ruleId":"200","severity":1,"message":"243","line":72,"column":10,"nodeType":"202","messageId":"203","endLine":72,"endColumn":17},{"ruleId":"200","severity":1,"message":"244","line":81,"column":7,"nodeType":"202","messageId":"203","endLine":81,"endColumn":14},{"ruleId":"200","severity":1,"message":"245","line":84,"column":7,"nodeType":"202","messageId":"203","endLine":84,"endColumn":13},{"ruleId":"200","severity":1,"message":"246","line":95,"column":9,"nodeType":"202","messageId":"203","endLine":95,"endColumn":31},{"ruleId":"200","severity":1,"message":"247","line":98,"column":9,"nodeType":"202","messageId":"203","endLine":98,"endColumn":27},{"ruleId":"200","severity":1,"message":"248","line":101,"column":9,"nodeType":"202","messageId":"203","endLine":101,"endColumn":27},{"ruleId":"200","severity":1,"message":"249","line":139,"column":7,"nodeType":"202","messageId":"203","endLine":139,"endColumn":13},{"ruleId":"200","severity":1,"message":"250","line":140,"column":7,"nodeType":"202","messageId":"203","endLine":140,"endColumn":15},"no-unused-vars","'EventsGridViewManager' is defined but never used.","Identifier","unusedVar","no-native-reassign",["251"],"no-negated-in-lhs",["252"],"'Container' is defined but never used.","'SearchBar' is defined but never used.","'handleDeleteQuestion' is assigned a value but never used.","'handleChangeSearch' is assigned a value but never used.","'handleSearch' is assigned a value but never used.","'Link' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'makeStyles' is defined but never used.","'TextField' is defined but never used.","'Icon' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["253"],["251"],["252"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression",["254"],"'editorStates' is assigned a value but never used.","'setEdittorStates' is assigned a value but never used.",["251"],["252"],"'asker' is assigned a value but never used.","'id' is defined but never used.","'setCategories' is assigned a value but never used.","'deleteJob' is defined but never used.",["255"],["256"],"'DialogDecline' is defined but never used.","'approveQuestion' is defined but never used.","'declineQuestion' is defined but never used.","'decline' is assigned a value but never used.","'perPage' is assigned a value but never used.","'status' is assigned a value but never used.","'handleClickOpenDecline' is assigned a value but never used.","'handleOpentDecline' is assigned a value but never used.","'handleCloseDecline' is assigned a value but never used.","'dateTo' is assigned a value but never used.","'dateFrom' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"257","fix":"258"},{"desc":"257","fix":"259"},{"desc":"257","fix":"260"},{"desc":"257","fix":"261"},"Update the dependencies array to be: [id]",{"range":"262","text":"263"},{"range":"264","text":"263"},{"range":"265","text":"263"},{"range":"266","text":"263"},[1343,1345],"[id]",[4461,4463],[1395,1397],[1318,1320]]