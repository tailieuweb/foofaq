[{"D:\\core_foo\\foofaq\\src\\index.js":"1","D:\\core_foo\\foofaq\\src\\pages\\FormManager\\index.js":"2","D:\\core_foo\\foofaq\\src\\components\\FormManager\\Jobs.js":"3","D:\\core_foo\\foofaq\\src\\components\\HeaderAsideNavbar\\index.js":"4","D:\\core_foo\\foofaq\\src\\helpers\\index.js":"5","D:\\core_foo\\foofaq\\src\\pages\\QuestionManager\\index.js":"6","D:\\core_foo\\foofaq\\src\\components\\QuestionTable\\index.js":"7","D:\\core_foo\\foofaq\\src\\components\\FormManager\\User.js":"8","D:\\core_foo\\foofaq\\src\\reducers\\index.js":"9","D:\\core_foo\\foofaq\\src\\helpers\\userAPI.js":"10","D:\\core_foo\\foofaq\\src\\components\\UserManager\\index.js":"11","D:\\core_foo\\foofaq\\src\\components\\UserDetailStoryFirst\\index.js":"12","D:\\core_foo\\foofaq\\src\\components\\NavigationBar\\index.js":"13","D:\\core_foo\\foofaq\\src\\components\\SearchBar\\index.js":"14","D:\\core_foo\\foofaq\\src\\common\\PageLayout\\index.js":"15","D:\\core_foo\\foofaq\\src\\common\\CustomLink.js":"16","D:\\core_foo\\foofaq\\src\\components\\UserList\\index.js":"17","D:\\test2\\foofaq\\src\\index.js":"18","D:\\test2\\foofaq\\src\\pages\\QuestionManager\\index.js":"19","D:\\test2\\foofaq\\src\\components\\HeaderAsideNavbar\\index.js":"20","D:\\test2\\foofaq\\src\\components\\QuestionTable\\index.js":"21"},{"size":1505,"mtime":1608025078746,"results":"22","hashOfConfig":"23"},{"size":1460,"mtime":1607993757344,"results":"24","hashOfConfig":"23"},{"size":5332,"mtime":1607991576570,"results":"25","hashOfConfig":"23"},{"size":5037,"mtime":1607995244508,"results":"26","hashOfConfig":"23"},{"size":5718,"mtime":1607994228712,"results":"27","hashOfConfig":"23"},{"size":1231,"mtime":1607993467503,"results":"28","hashOfConfig":"23"},{"size":1183,"mtime":1607993597407,"results":"29","hashOfConfig":"23"},{"size":5162,"mtime":1607992390616,"results":"30","hashOfConfig":"23"},{"size":168,"mtime":1607991576580,"results":"31","hashOfConfig":"23"},{"size":1298,"mtime":1608003914713,"results":"32","hashOfConfig":"23"},{"size":4816,"mtime":1607992635183,"results":"33","hashOfConfig":"23"},{"size":11093,"mtime":1607997734333,"results":"34","hashOfConfig":"23"},{"size":7824,"mtime":1607997896373,"results":"35","hashOfConfig":"23"},{"size":530,"mtime":1607991576573,"results":"36","hashOfConfig":"23"},{"size":409,"mtime":1607991576567,"results":"37","hashOfConfig":"23"},{"size":497,"mtime":1607991576566,"results":"38","hashOfConfig":"23"},{"size":1231,"mtime":1608022217864,"results":"39","hashOfConfig":"23"},{"size":955,"mtime":1608652455377,"results":"40","hashOfConfig":"41"},{"size":564,"mtime":1608652455379,"results":"42","hashOfConfig":"41"},{"size":4989,"mtime":1608652833046,"results":"43","hashOfConfig":"41"},{"size":1225,"mtime":1608652455368,"results":"44","hashOfConfig":"41"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1azhiz9",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"55"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"69"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"49"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"69"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"gkb16p",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\core_foo\\foofaq\\src\\index.js",[],"D:\\core_foo\\foofaq\\src\\pages\\FormManager\\index.js",[],["97","98"],"D:\\core_foo\\foofaq\\src\\components\\FormManager\\Jobs.js",["99","100","101","102"],"D:\\core_foo\\foofaq\\src\\components\\HeaderAsideNavbar\\index.js",["103","104","105","106","107","108"],"import React, { useState } from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport DraftsIcon from \"@material-ui/icons/Drafts\";\r\nimport DashboardIcon from \"@material-ui/icons/Dashboard\";\r\n\r\n//icon\r\nimport WorkIcon from \"@material-ui/icons/Work\";\r\nimport EventIcon from \"@material-ui/icons/Event\";\r\nimport QuestionAnswerIcon from \"@material-ui/icons/QuestionAnswer\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport Link from \"../../common/CustomLink\";\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport \"./index.scss\";\r\nfunction Index(props) {\r\n  const [selectedIndex, setSelectedIndex] = useState(0);\r\n  const handleListItemClick = (event, index) => {\r\n    setSelectedIndex(index);\r\n  };\r\n  return (\r\n    <div>\r\n      <div\r\n        className=\"navigation\"\r\n        style={{\r\n          width: \"15%\",\r\n          position: \"fixed\",\r\n          top: 0,\r\n          left: 0,\r\n        }}\r\n      >\r\n        <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n          {/* <ListItem\r\n            button\r\n            selected={selectedIndex === 0}\r\n            onClick={(event) => handleListItemClick(event, 0)}\r\n          >\r\n            <ListItemIcon>\r\n              <DashboardIcon />\r\n            </ListItemIcon>\r\n\r\n            <ListItemText primary=\"Dashboard\" />\r\n          </ListItem> */}\r\n\r\n          {/* <Link\r\n            style={{\r\n              width: \"100%\",\r\n              textDecoration: \"none\",\r\n              color: \"#000000b8\",\r\n            }}\r\n            to=\"/manager/jobs\"\r\n          >\r\n            <ListItem\r\n              button\r\n              selected={selectedIndex === 1}\r\n              onClick={(event) => handleListItemClick(event, 1)}\r\n            >\r\n              <ListItemIcon>\r\n                <WorkIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Jobs\" />\r\n            </ListItem>\r\n          </Link> */}\r\n          {/* <Link\r\n            style={{\r\n              width: \"100%\",\r\n              textDecoration: \"none\",\r\n              color: \"#000000b8\",\r\n            }}\r\n            to=\"/manager/events\"\r\n          >\r\n            <ListItem\r\n              button\r\n              selected={selectedIndex === 2}\r\n              onClick={(event) => handleListItemClick(event, 2)}\r\n            >\r\n              <ListItemIcon>\r\n                <EventIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Events\" />\r\n            </ListItem>\r\n          </Link> */}\r\n\r\n          {/* <Link\r\n            style={{\r\n              width: \"100%\",\r\n              textDecoration: \"none\",\r\n              color: \"#000000b8\",\r\n            }}\r\n            to=\"/manager/questions\"\r\n          >\r\n            <ListItem\r\n              button\r\n              selected={selectedIndex === 3}\r\n              onClick={(event) => handleListItemClick(event, 3)}\r\n            >\r\n              <ListItemIcon>\r\n                <QuestionAnswerIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Questions\" />\r\n            </ListItem>\r\n          </Link> */}\r\n\r\n\r\n          {/* <Link\r\n            style={{\r\n              width: \"100%\",\r\n              textDecoration: \"none\",\r\n              color: \"#000000b8\",\r\n            }}\r\n            to=\"/manager/categories\"\r\n          >\r\n            <ListItem\r\n              button\r\n              selected={selectedIndex === 4}\r\n              onClick={(event) => handleListItemClick(event, 4)}\r\n            >\r\n              <ListItemIcon>\r\n                <MenuIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Categories\" />\r\n            </ListItem>\r\n          </Link> */}\r\n\r\n          {/* <Link\r\n            style={{\r\n              width: \"100%\",\r\n              textDecoration: \"none\",\r\n              color: \"#000000b8\",\r\n            }}\r\n            to=\"/approval\"\r\n          >\r\n            <ListItem\r\n              button\r\n              selected={selectedIndex === 5}\r\n              onClick={(event) => handleListItemClick(event, 5)}\r\n            >\r\n              <ListItemIcon>\r\n                <DraftsIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Approval\" />\r\n            </ListItem>\r\n          </Link> */}\r\n\r\n\r\n           {/* User */}\r\n           <Link\r\n            style={{\r\n              width: \"100%\",\r\n              textDecoration: \"none\",\r\n              color: \"#000000b8\",\r\n            }}\r\n            to=\"/manager/user\"\r\n          >\r\n            <ListItem\r\n              button\r\n              selected={selectedIndex === 0}\r\n              onClick={(event) => handleListItemClick(event, 0)}\r\n            >\r\n              <ListItemIcon>\r\n                <PeopleIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"User\" />\r\n            </ListItem>\r\n          </Link>\r\n        </List>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Index;\r\n",["109","110"],"D:\\core_foo\\foofaq\\src\\helpers\\index.js",[],"D:\\core_foo\\foofaq\\src\\pages\\QuestionManager\\index.js",[],"D:\\core_foo\\foofaq\\src\\components\\QuestionTable\\index.js",["111","112","113"],"import React from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Button from \"@material-ui/core/Button\";\n\nexport const TableH = (props) => {\n  // const classes = useStyles();\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell align=\"left\">{props.tt_id}</TableCell>\n        <TableCell>{props.tt_title}</TableCell>\n        <TableCell align=\"left\">{props.tt_update}</TableCell>\n        <TableCell align=\"left\">{props.tt_delete}</TableCell>\n      </TableRow>\n    </TableHead>\n  );\n};\n\nexport const TableB = (props) => {\n  return (\n    <TableBody>\n      <TableRow key={props.key_id}>\n        <TableCell align=\"left\">{props.id}</TableCell>\n\n        <TableCell component=\"th\" scope=\"row\">\n          {props.title}\n        </TableCell>\n\n        <TableCell align=\"left\">{props.update}</TableCell>\n        <TableCell align=\"left\">{props.delete}</TableCell>\n      </TableRow>\n    </TableBody>\n  );\n};\n",["114","115"],"D:\\core_foo\\foofaq\\src\\components\\FormManager\\User.js",["116"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { getUser, AddUser, UpdateUser } from \"../../helpers/userAPI\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: \"25ch\",\r\n  },\r\n  button: {\r\n    margin: \"10px auto\",\r\n  },\r\n}));\r\n\r\nconst UserForm = () => {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const classes = useStyles();\r\n  const [user, setUser] = useState([]);\r\n  const [user_name, setName] = useState(\"\");\r\n  const [user_email, setEmail] = useState(\"\");\r\n  const [user_password, setPassword] = useState(\"\");\r\n  let { id } = useParams();\r\n\r\n  let handleSubmit = (event) => {\r\n    event.preventDefault();\r\n  };\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n  useEffect(() => {\r\n    (async () => {\r\n      const user = await getUser(id);\r\n      setUser(user);\r\n    })();\r\n  }, []);\r\n  if (id === undefined) {\r\n    handleSubmit = (event) => {\r\n      event.preventDefault();\r\n      AddUser(user_email, user_password, id, user_name).then(function (response) {\r\n        setOpen(true);\r\n        window.location.reload();\r\n      }).catch(function (error) {\r\n        console.log(error);\r\n      });\r\n    };\r\n  } else {\r\n    handleSubmit = (event) => {\r\n      event.preventDefault();\r\n      UpdateUser(id, user_name, user_password).then(function (response) {\r\n        setOpen(true);\r\n        window.location.reload();\r\n      }).catch(function (error) {\r\n        console.log(error);\r\n      });\r\n    };\r\n  }\r\n  console.log(user.user_name);\r\n\r\n  // let handleSubmit = (event) => {\r\n  //   event.preventDefault();\r\n  // };\r\n  // const handleClose = (event, reason) => {\r\n  //   if (reason === \"clickaway\") {\r\n  //     return;\r\n  //   }\r\n\r\n  //   setOpen(false);\r\n  // };\r\n  // useEffect(() => {\r\n  //   (async () => {\r\n  //     const questionData = await getUser(id);\r\n  //     setUser(questionData);\r\n  //   })();\r\n  // }, []);\r\n  // if (id === undefined) {\r\n  //   handleSubmit = (event) => {\r\n  //     event.preventDefault();\r\n  //     AddUser(user_name, user_password,user_email)\r\n  //       .then(function (response) {\r\n  //         setOpen(true);\r\n  //         window.location.reload();\r\n  //       })\r\n  //       .catch(function (error) {\r\n  //         // handle error\r\n  //         console.log(error);\r\n  //       });\r\n  //   };\r\n  // } else {\r\n  //   handleSubmit = (event) => {\r\n  //     event.preventDefault();\r\n  //     UpdateUser(id, user_name, user_email,user_password)\r\n  //       .then(function (response) {\r\n  //         setOpen(true);\r\n  //         window.location.reload();\r\n  //       })\r\n  //       .catch(function (error) {\r\n  //         // handle error\r\n  //         console.log(error);\r\n  //       });\r\n  //   };\r\n  // }\r\n  // console.log(user.user_name);\r\n  return (\r\n    <div>\r\n      <h1> User Form</h1>\r\n\r\n      <div className={classes.root}>\r\n        <form>\r\n          <TextField\r\n            label=\"Name\"\r\n            style={{ margin: 8 }}\r\n            placeholder=\"Name...\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            defaultValue={user.user_name}\r\n            onChange={(e) => {\r\n              setName(e.target.value);\r\n            }}\r\n            variant=\"outlined\"\r\n          />\r\n          <TextField\r\n            title=\"Password\"\r\n            label=\"PassWord\"\r\n            style={{ margin: 8 }}\r\n            placeholder=\"password...\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            onChange={(e) => {\r\n              setPassword(e.target.value);\r\n            }}\r\n            defaultValue={user.user_password}\r\n            variant=\"outlined\"\r\n          />\r\n          <TextField\r\n            label=\"Email\"\r\n            style={{ margin: 8 }}\r\n            placeholder=\"Email...\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            onChange={(e) => {\r\n              setEmail(e.target.value);\r\n            }}\r\n            defaultValue={user.user_email}\r\n            variant=\"outlined\"\r\n          />\r\n          <Button\r\n            onClick={handleSubmit}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.button}\r\n          >\r\n            Send\r\n          </Button>\r\n        </form>\r\n      </div>\r\n      <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"success\">\r\n          This is a success message!\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserForm;\r\n","D:\\core_foo\\foofaq\\src\\reducers\\index.js",[],["117","118"],"D:\\core_foo\\foofaq\\src\\helpers\\userAPI.js",[],"D:\\core_foo\\foofaq\\src\\components\\UserManager\\index.js",["119"],"import React, { useEffect, useState } from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Button from \"@material-ui/core/Button\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport { TableH, TableB } from \"../../components/QuestionTable\";\n\nimport Snackbar from \"@material-ui/core/Snackbar\";\n\nimport Link from \"../../common/CustomLink\";\n// import QuestionApprovalCard from \"../../components/QuestionApprovalCard\";\nimport HeaderAsideNavbar from \"../../components/HeaderAsideNavbar\";\nimport SearchBar from \"../../components/SearchBar\";\n\n// import QuestionManager from \"../../components/QuestionManager/index\";\n// import QuestionApprovalDetail from \"../../components/QuetionAprovalDetail\";\nimport { getAllUser,getUserLimit, declineUser } from \"../../helpers/userAPI\";\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n  tablePa: {\n    marginTop: \"50px\",\n    marginRight: \"50px\",\n    paddingRight: \"50px\",\n  },\n  btnadd: {\n    marginTop: \"20px\",\n  },\n  pagination: {\n    margin: \"20px auto\",\n    marginLeft: \"25%\",\n  },\n});\n\nfunction Index(props) {\n  const classes = useStyles();\n  const [keyword, setKeyword] = useState(\"\");\n  const [questions, setQuestion] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [page, setPage] = useState(1);\n  const [pagQuestion, setPagQuestion] = useState([]);\n  const [key, setKey] = useState(\"\");\n  let perPage = 5;\n  let count = parseInt(pagQuestion.length) / perPage;\n\n  const handleChange = (event, value) => {\n    setPage(value);\n  };\n  console.log(Math.ceil(count));\n\n  useEffect(() => {\n    (async () => {\n      const questionData = await getAllUser();\n      setPagQuestion(questionData);\n    })();\n  }, []);\n  useEffect(() => {\n    (async () => {\n      const questionData = await getUserLimit(key, page, perPage);\n      setQuestion(questionData);\n    })();\n  }, [key, page, perPage]);\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpen(false);\n  };\n  const DeleteQuestion = (id) => {\n    var answer = window.confirm(\"you definitely want to delete \");\n    if (answer) {\n      declineUser(id)\n        .then(function (response) {\n          // handle success\n          console.log(\"Successfully\");\n          setOpen(true);\n          window.location.reload();\n        })\n        .catch(function (error) {\n          // handle error\n          setOpen(false);\n        });\n    } else {\n      return;\n    }\n  };\n\n  const handleChangeSearch = (e) => {\n    setKeyword(e.target.value);\n  };\n  const handleSearch = () => {\n    setKey(keyword);\n  };\n\n  return (\n    <div>\n      <h1> User Manager </h1>\n      <SearchBar\n        handleChangeSearch={handleChangeSearch}\n        handleSearch={handleSearch}\n      ></SearchBar>\n      <Link to=\"/forms/adduser\">\n        {\" \"}\n        <Button className={classes.btnadd} variant=\"contained\" color=\"primary\">\n          Add\n        </Button>\n      </Link>\n      <TableContainer className={classes.tablePa} component={Paper}>\n        <Table className={classes.table} aria-label=\"simple table\">\n          <TableH\n            tt_id=\"#ID\"\n            tt_title=\"USERNAME\"\n            tt_update=\"UPDATE\"\n            tt_delete=\"DELETE\"\n          ></TableH>\n          {questions.map((question) => (\n            <TableB\n              key={question.id}\n              key_id={question.id}\n              id={question.id}\n              title={question.user_name}\n              update={\n                <Link to={\"/forms/adduser/\" + question.id}>\n                  <Button variant=\"contained\" color=\"primary\">\n                    {\" \"}\n                    Update{\" \"}\n                  </Button>\n                </Link>\n              }\n              delete={\n                <Button\n                  onClick={() => {\n                    DeleteQuestion(question.id);\n                  }}\n                  variant=\"contained\"\n                  color=\"secondary\"\n                >\n                  {\" \"}\n                  Delete{\" \"}\n                </Button>\n              }\n            ></TableB>\n          ))}\n        </Table>\n      </TableContainer>\n\n      <Pagination\n        className={classes.pagination}\n        count={Math.ceil(count)}\n        variant=\"outlined\"\n        shape=\"rounded\"\n        onChange={handleChange}\n        page={page}\n        siblingCount={1}\n        boundaryCount={1}\n      />\n      <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"success\">\n          Delete success!\n        </Alert>\n      </Snackbar>\n    </div>\n  );\n}\n\nexport default Index;\n","D:\\core_foo\\foofaq\\src\\components\\UserDetailStoryFirst\\index.js",["120","121","122","123"],"//hook call api:\nimport React, { useState, useEffect } from \"react\";\nimport { API_ONE_USERSTORY } from \"../../helpers/index\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n// import Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\n// import Imgavatar from \"../../images/stack.png\";\n// import IconButton from \"@material-ui/core/IconButton\";\n// import PhotoCamera from \"@material-ui/icons/PhotoCamera\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport \"./index.scss\";\nimport PageLayout from \"../../common/PageLayout/index\";\n\nconst index = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n  small: {\n    width: theme.spacing(3),\n    height: theme.spacing(3),\n  },\n\n  large: {\n    width: theme.spacing(7),\n    height: theme.spacing(7),\n  },\n\n  input: {\n    display: \"none\",\n  },\n  root: {\n    width: \"30%\",\n    maxWidth: 360,\n\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nexport default function ImageAvatars() {\n  const classes = index();\n  const [user, setUser] = useState({});\n\n  const displaynameEl1 = React.useRef(null);\n  const titleE1 = React.useRef(null);\n  const fullnameEl1 = React.useRef(null);\n  const ImgavatarEl1 = React.useRef(null);\n  const liveE1 = React.useRef(null);\n  const twiterE1 = React.useRef(null);\n  const WebsiteE1 = React.useRef(null);\n  const GitHubE1 = React.useRef(null);\n  //Method: Get\n  useEffect(() => {\n    fetch(`${API_ONE_USERSTORY}`, {\n      method: \"GET\",\n    })\n      .then((res) => res.json())\n      .then((response) => {\n        //  console.log(response);\n        setUser(response);\n      })\n      .catch((error) => console.log(error));\n  }, []);\n  const HandleSubmit = (e) => {\n    e.preventDefault();\n    fetch(`${API_ONE_USERSTORY}`, {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n\n      body: JSON.stringify({\n        displayname: displaynameEl1.current.value,\n        fullname: fullnameEl1.current.value,\n        // avatar: ImgavatarEl1.current.value,\n        title: titleE1.current.value,\n        live: liveE1.current.value,\n        twiter: twiterE1.current.value,\n        Website: WebsiteE1.current.value,\n        GitHub: GitHubE1.current.value,\n      }),\n    }).then((response) => {\n      console.log(response);\n    });\n  };\n  return (\n    <PageLayout>\n    <div className=\"alert alert-info container\">\n     \n        <React.Fragment>\n          <CssBaseline />\n          <Container>\n            <Typography component=\"div\">\n              {/* <div className={classes.root}>\n              <Avatar\n                alt=\"Remy Sharp\"\n                src={user.avatar}\n                className={classes.large}\n              />\n              <input\n                accept=\"image/*\"\n                className={classes.input}\n                id=\"contained-button-file\"\n                multiple\n                type=\"file\"\n                ref={ImgavatarEl1}\n              />\n              <label htmlFor=\"contained-button-file\">\n                <Button variant=\"contained\" color=\"black\" component=\"span\">\n                  Upload\n                </Button>\n              </label>\n              <input\n                accept=\"image/*\"\n                className={classes.input}\n                id=\"icon-button-file\"\n                type=\"file\"\n              />\n              <label htmlFor=\"icon-button-file\">\n                <IconButton\n                  color=\"primary\"\n                  aria-label=\"upload picture\"\n                  component=\"span\"\n                >\n                  <PhotoCamera />\n                </IconButton>\n              </label>\n            </div> */}\n              <div>\n                <br />\n                <form>\n                  <div className=\"form-row\">\n                    <div className=\"form-group col-md-6\">\n                      <label htmlFor=\"inputDisplay\">Display name</label>\n                      <input\n                        className=\"form-control\"\n                        id=\"inputDisplay\"\n                        defaultValue={user.displayname}\n                        ref={displaynameEl1}\n                      />\n                      <small id=\"emailHelp\" className=\"form-text text-muted\">\n                        <i className=\"fas fa-exclamation\"></i> How you appear to\n                        other users on the Stack Overflow QvsA Network..\n                      </small>\n                    </div>\n                    <div className=\"form-group col-md-6\">\n                      <label htmlFor=\"inputFullname\">Full name</label>\n                      <input\n                        className=\"form-control\"\n                        id=\"inputFullname\"\n                        defaultValue={user.fullname}\n                        ref={fullnameEl1}\n                      />\n                      <small id=\"emailHelp\" className=\"form-text text-muted\">\n                        <i className=\"fas fa-exclamation\"></i> How you appear to\n                        employers, your private Teams, and to other users when\n                        you share your Developer Story.\n                      </small>\n                    </div>\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"inputTitle\">Title</label>\n                    <input\n                      type=\"text\"\n                      className=\"form-control\"\n                      id=\"inputTitle\"\n                      placeholder=\"What? you current position?\"\n                      defaultValue={user.title}\n                      ref={titleE1}\n                    />\n                  </div>\n                  <div className=\"form-row\">\n                    <div className=\"form-group col-md-6\">\n                      <label htmlFor=\"inputDisplay\">Where you live</label>\n                      <input\n                        className=\"form-control\"\n                        id=\"inputDisplay\"\n                        placeholder=\"Curent Location\"\n                        defaultValue={user.live}\n                        ref={liveE1}\n                      />\n                    </div>\n                    <div className=\"form-group col-md-6\">\n                      <label htmlFor=\"inputFullname\">Twiter</label>\n                      <label\n                        className=\"sr-only\"\n                        htmlFor=\"inlineFormInputGroupUsername2\"\n                      ></label>\n                      <div className=\"input-group mb-2 mr-sm-2\">\n                        <div className=\"input-group-prepend\">\n                          <div className=\"input-group-text\">\n                            <i className=\"fab fa-twitter\"></i>\n                          </div>\n                        </div>\n                        <input\n                          type=\"text\"\n                          className=\"form-control\"\n                          id=\"inlineFormInputGroupUsername2\"\n                          placeholder=\"Profile link or usemame\"\n                          defaultValue={user.twiter}\n                          ref={twiterE1}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"form-row\">\n                    <div className=\"form-group col-md-6\">\n                      <label htmlFor=\"inputDisplay\">Website</label>\n                      <label\n                        className=\"sr-only\"\n                        htmlFor=\"inlineFormInputGroupUsername2\"\n                      ></label>\n                      <div className=\"input-group mb-2 mr-sm-2\">\n                        <div className=\"input-group-prepend\">\n                          <div className=\"input-group-text\">\n                            <i className=\"fas fa-cogs\"></i>\n                          </div>\n                        </div>\n                        <input\n                          type=\"text\"\n                          className=\"form-control\"\n                          id=\"inlineFormInputGroupUsername2\"\n                          placeholder=\"http://example.org/\"\n                          defaultValue={user.Website}\n                          ref={WebsiteE1}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"form-group col-md-6\">\n                      <label htmlFor=\"inputFullname\">GitHub</label>\n                      <label\n                        className=\"sr-only\"\n                        htmlFor=\"inlineFormInputGroupUsername2\"\n                      ></label>\n                      <div className=\"input-group mb-2 mr-sm-2\">\n                        <div className=\"input-group-prepend\">\n                          <div className=\"input-group-text\">\n                            <i className=\"fab fa-github\"></i>\n                          </div>\n                        </div>\n                        <input\n                          type=\"text\"\n                          className=\"form-control\"\n                          id=\"inlineFormInputGroupUsername2\"\n                          placeholder=\"Profile link or usemame\"\n                          defaultValue={user.GitHub}\n                          ref={GitHubE1}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                  <div>\n                    <br />\n                    <div className=\"alert\">\n                      <ButtonGroup\n                        orientation=\"vertical\"\n                        color=\"primary\"\n                        aria-label=\"vertical contained primary button group\"\n                        variant=\"contained\"\n                      >\n                        {/* <Button onClick={HandleSubmit} Link>\n                        Save\n                      </Button> */}\n                        <Link\n                          to={`/Edit-Profile`}\n                          type=\"submit\"\n                          className=\"btn btn-primary\"\n                          onClick={HandleSubmit}\n                          Link\n                        >\n                          Save\n                        </Link>\n                      </ButtonGroup>\n                      <ButtonGroup\n                        orientation=\"vertical\"\n                        color=\"primary\"\n                        aria-label=\"vertical contained primary button group\"\n                        variant=\"text\"\n                      >\n                        <Button>Cancel</Button>\n                      </ButtonGroup>\n                    </div>\n                  </div>\n                </form>\n              </div>\n            </Typography>\n          </Container>\n        </React.Fragment>\n   \n    </div>\n    </PageLayout>\n  );\n}\n","D:\\core_foo\\foofaq\\src\\components\\NavigationBar\\index.js",[],"D:\\core_foo\\foofaq\\src\\components\\SearchBar\\index.js",[],"D:\\core_foo\\foofaq\\src\\common\\PageLayout\\index.js",[],"D:\\core_foo\\foofaq\\src\\common\\CustomLink.js",[],"D:\\core_foo\\foofaq\\src\\components\\UserList\\index.js",["124","125"],"import React, { useEffect, useState } from \"react\";\r\nimport SearchBar from \"../../components/SearchBar\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport \"./index.scss\";\r\nfunction ListUser(props) {\r\n  const [keyword, setKeyword] = useState(\"\");\r\n  const [key, setKey] = useState(\"\");\r\n  const handleChangeSearch = (e) => {\r\n    setKeyword(e.target.value);\r\n  };\r\n  const handleSearch = () => {\r\n    setKey(keyword);\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n        <h1>Users</h1>\r\n      <div className=\"file-content\">\r\n      \r\n        <SearchBar\r\n          handleChangeSearch={handleChangeSearch}\r\n          handleSearch={handleSearch}\r\n        ></SearchBar>\r\n\r\n        <div className=\"section-list\">\r\n          \r\n            <ButtonGroup\r\n              disableElevation\r\n              aria-label=\"small outlined button group\"\r\n            >\r\n              <Button>Reputation</Button>\r\n              <Button>New users</Button>\r\n              <Button>Voter</Button>\r\n              <Button>Editors</Button>\r\n              <Button>Moderator</Button>\r\n            </ButtonGroup>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ListUser;\r\n","D:\\test2\\foofaq\\src\\index.js",[],"D:\\test2\\foofaq\\src\\pages\\QuestionManager\\index.js",[],"D:\\test2\\foofaq\\src\\components\\HeaderAsideNavbar\\index.js",[],"D:\\test2\\foofaq\\src\\components\\QuestionTable\\index.js",["126","127","128"],{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"134","line":2,"column":10,"nodeType":"135","messageId":"136","endLine":2,"endColumn":20},{"ruleId":"133","severity":1,"message":"137","line":3,"column":8,"nodeType":"135","messageId":"136","endLine":3,"endColumn":17},{"ruleId":"133","severity":1,"message":"138","line":4,"column":8,"nodeType":"135","messageId":"136","endLine":4,"endColumn":12},{"ruleId":"139","severity":1,"message":"140","line":40,"column":6,"nodeType":"141","endLine":40,"endColumn":8,"suggestions":"142"},{"ruleId":"133","severity":1,"message":"143","line":6,"column":8,"nodeType":"135","messageId":"136","endLine":6,"endColumn":18},{"ruleId":"133","severity":1,"message":"144","line":7,"column":8,"nodeType":"135","messageId":"136","endLine":7,"endColumn":21},{"ruleId":"133","severity":1,"message":"145","line":10,"column":8,"nodeType":"135","messageId":"136","endLine":10,"endColumn":16},{"ruleId":"133","severity":1,"message":"146","line":11,"column":8,"nodeType":"135","messageId":"136","endLine":11,"endColumn":17},{"ruleId":"133","severity":1,"message":"147","line":12,"column":8,"nodeType":"135","messageId":"136","endLine":12,"endColumn":26},{"ruleId":"133","severity":1,"message":"148","line":13,"column":8,"nodeType":"135","messageId":"136","endLine":13,"endColumn":16},{"ruleId":"129","replacedBy":"149"},{"ruleId":"131","replacedBy":"150"},{"ruleId":"133","severity":1,"message":"134","line":3,"column":10,"nodeType":"135","messageId":"136","endLine":3,"endColumn":20},{"ruleId":"133","severity":1,"message":"151","line":9,"column":8,"nodeType":"135","messageId":"136","endLine":9,"endColumn":13},{"ruleId":"133","severity":1,"message":"152","line":10,"column":8,"nodeType":"135","messageId":"136","endLine":10,"endColumn":14},{"ruleId":"129","replacedBy":"153"},{"ruleId":"131","replacedBy":"154"},{"ruleId":"139","severity":1,"message":"140","line":48,"column":6,"nodeType":"141","endLine":48,"endColumn":8,"suggestions":"155"},{"ruleId":"129","replacedBy":"156"},{"ruleId":"131","replacedBy":"157"},{"ruleId":"133","severity":1,"message":"158","line":16,"column":8,"nodeType":"135","messageId":"136","endLine":16,"endColumn":25},{"ruleId":"133","severity":1,"message":"159","line":15,"column":16,"nodeType":"135","messageId":"136","endLine":15,"endColumn":23},{"ruleId":"160","severity":1,"message":"161","line":39,"column":3,"nodeType":"162","messageId":"163","endLine":39,"endColumn":7},{"ruleId":"133","severity":1,"message":"164","line":48,"column":9,"nodeType":"135","messageId":"136","endLine":48,"endColumn":16},{"ruleId":"133","severity":1,"message":"165","line":54,"column":9,"nodeType":"135","messageId":"136","endLine":54,"endColumn":21},{"ruleId":"133","severity":1,"message":"166","line":1,"column":17,"nodeType":"135","messageId":"136","endLine":1,"endColumn":26},{"ruleId":"133","severity":1,"message":"167","line":8,"column":10,"nodeType":"135","messageId":"136","endLine":8,"endColumn":13},{"ruleId":"133","severity":1,"message":"134","line":3,"column":10,"nodeType":"135","messageId":"136","endLine":3,"endColumn":20},{"ruleId":"133","severity":1,"message":"151","line":9,"column":8,"nodeType":"135","messageId":"136","endLine":9,"endColumn":13},{"ruleId":"133","severity":1,"message":"152","line":10,"column":8,"nodeType":"135","messageId":"136","endLine":10,"endColumn":14},"no-native-reassign",["168"],"no-negated-in-lhs",["169"],"no-unused-vars","'makeStyles' is defined but never used.","Identifier","unusedVar","'TextField' is defined but never used.","'Icon' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["170"],"'DraftsIcon' is defined but never used.","'DashboardIcon' is defined but never used.","'WorkIcon' is defined but never used.","'EventIcon' is defined but never used.","'QuestionAnswerIcon' is defined but never used.","'MenuIcon' is defined but never used.",["168"],["169"],"'Paper' is defined but never used.","'Button' is defined but never used.",["168"],["169"],["171"],["168"],["169"],"'HeaderAsideNavbar' is defined but never used.","'NavLink' is defined but never used.","no-dupe-keys","Duplicate key 'root'.","ObjectExpression","unexpected","'classes' is assigned a value but never used.","'ImgavatarEl1' is assigned a value but never used.","'useEffect' is defined but never used.","'key' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"172","fix":"173"},{"desc":"172","fix":"174"},"Update the dependencies array to be: [id]",{"range":"175","text":"176"},{"range":"177","text":"176"},[1343,1345],"[id]",[1344,1346]]