[{"E:\\foofaq\\src\\reducers\\index.js":"1","E:\\foofaq\\src\\components\\CategoriesGridView\\index.js":"2","E:\\foofaq\\src\\components\\FormManager\\Categories.js":"3","E:\\foofaq\\src\\components\\EventCard\\index.js":"4","E:\\foofaq\\src\\components\\QuestionInfoDetail\\index.js":"5","E:\\foofaq\\src\\common\\PageLayout\\index.js":"6","E:\\foofaq\\src\\components\\QuestionTable\\index.js":"7","E:\\foofaq\\src\\components\\QuestionForm\\index.js":"8","E:\\foofaq\\src\\components\\CategoriesInput\\index.js":"9"},{"size":168,"mtime":1608190508700,"results":"10","hashOfConfig":"11"},{"size":1863,"mtime":1608190508638,"results":"12","hashOfConfig":"11"},{"size":3605,"mtime":1608190508643,"results":"13","hashOfConfig":"11"},{"size":1640,"mtime":1608190508641,"results":"14","hashOfConfig":"11"},{"size":6119,"mtime":1608190508650,"results":"15","hashOfConfig":"11"},{"size":409,"mtime":1608190508636,"results":"16","hashOfConfig":"11"},{"size":1225,"mtime":1608190508651,"results":"17","hashOfConfig":"11"},{"size":7638,"mtime":1608192923400,"results":"18","hashOfConfig":"11"},{"size":1178,"mtime":1608193494884,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"drubmg",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\foofaq\\src\\reducers\\index.js",[],"E:\\foofaq\\src\\components\\CategoriesGridView\\index.js",[],"E:\\foofaq\\src\\components\\FormManager\\Categories.js",["39"],"E:\\foofaq\\src\\components\\EventCard\\index.js",[],"E:\\foofaq\\src\\components\\QuestionInfoDetail\\index.js",[],"E:\\foofaq\\src\\common\\PageLayout\\index.js",[],"E:\\foofaq\\src\\components\\QuestionTable\\index.js",["40","41","42"],"E:\\foofaq\\src\\components\\QuestionForm\\index.js",["43"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  EditorState,\r\n  convertToRaw,\r\n  ContentState,\r\n  convertFromHTML,\r\n} from \"draft-js\";\r\nimport { Editor } from \"react-draft-wysiwyg\";\r\nimport axios from \"axios\";\r\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./index.scss\";\r\n\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport MuiDialogContent from \"@material-ui/core/DialogContent\";\r\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport draftToMarkdown from \"draftjs-to-markdown\";\r\n\r\nimport CategoriesInput from \"../CategoriesInput\";\r\n\r\n//APIS\r\nimport { getQuesitonById } from \"../../helpers\";\r\n\r\nexport const listCategories = [];\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(2),\r\n  },\r\n  closeButton: {\r\n    position: \"absolute\",\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton\r\n          aria-label=\"close\"\r\n          className={classes.closeButton}\r\n          onClick={onClose}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nfunction QuestionForm() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [question, setQuestion] = useState([]);\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const [title, setTitle] = useState(\"\");\r\n  const [tag, setTag] = useState(\"\");\r\n\r\n  // const [editorState, setEditorState] = useState(EditorState.createEmpty());\r\n\r\n  useEffect(() => {\r\n    setEdittorStates(\r\n      EditorState.createWithContent(\r\n        ContentState.createFromBlockArray(\r\n          convertFromHTML(`${question.content}`)\r\n        )\r\n      )\r\n    );\r\n  }, [question.content]);\r\n  const [editorStates, setEdittorStates] = useState(EditorState.createEmpty());\r\n\r\n  let content = draftToMarkdown(convertToRaw(editorStates.getCurrentContent()));\r\n\r\n  const [nofi, setNofi] = useState(\"\");\r\n  let handleSubmit = (event) => {\r\n    event.preventDefault();\r\n  };\r\n  const { id } = useParams();\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const result = await getQuesitonById(id);\r\n      setQuestion(result);\r\n    })();\r\n  }, [id]);\r\n  if (id === undefined) {\r\n    handleSubmit = (event) => {\r\n      event.preventDefault();\r\n      questionPost();\r\n    };\r\n    const questionPost = () => {\r\n      axios\r\n        .post(\"https://5fc48ee536bc790016343a0b.mockapi.io/questions\", {\r\n          title: title,\r\n          tag: listCategories,\r\n          content: content,\r\n        })\r\n        .then(function (response) {\r\n          // handle success\r\n          setTitle(\"\");\r\n          setTag(\"\");\r\n          console.log(\"POST Successfully\");\r\n          setNofi(\"POST Successfully\");\r\n          setOpen(true);\r\n        })\r\n        .catch(function (error) {\r\n          // handle error\r\n          console.log(error);\r\n          setNofi(\"POST Failed\");\r\n          setOpen(true);\r\n        });\r\n    };\r\n  }\r\n\r\n  //Truong hop id co gia tri => PUT\r\n  else {\r\n    handleSubmit = (event) => {\r\n      event.preventDefault();\r\n      questionPut(id);\r\n    };\r\n    const questionPut = (id) => {\r\n      axios\r\n        .put(\"https://5fc48ee536bc790016343a0b.mockapi.io/questions/\" + id, {\r\n          title: title,\r\n          tag: listCategories,\r\n          content: content,\r\n        })\r\n        .then(function (response) {\r\n          // handle success\r\n          console.log(\"Successfully\");\r\n          setTitle(\"\");\r\n          setTag(\"\");\r\n          console.log(\"POST Successfully\");\r\n          setNofi(\"POST Successfully\");\r\n          setOpen(true);\r\n        })\r\n        .catch(function (error) {\r\n          // handle error\r\n          console.log(error);\r\n          console.log(error);\r\n          setNofi(\"POST Failed\");\r\n          setOpen(true);\r\n        });\r\n    };\r\n  }\r\n\r\n  // async function getQuestion() {\r\n  //   const response = await axios.get();\r\n  //   return response.data;\r\n  // }\r\n\r\n  // const sampleMarkup = `${question.id}`;\r\n  // const blocksFromHTML = convertFromHTML(sampleMarkup);\r\n  // const state = ContentState.createFromBlockArray(\r\n  //   blocksFromHTML.contentBlocks,\r\n  //   blocksFromHTML.entityMap\r\n  // );\r\n\r\n  // console.log(\"question: \" + question.content);\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"questionForm\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"questionTitle\">\r\n              <b>Tiêu đề</b>\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"questionTitle\"\r\n              aria-describedby=\"questionTitle\"\r\n              placeholder=\"Nhập tiêu đề câu hỏi...\"\r\n              onChange={(e) => {\r\n                setTitle(e.target.value);\r\n              }}\r\n              defaultValue={question.title}\r\n            />\r\n          </div>\r\n          <label htmlFor=\"aroundEditorQuestion\">\r\n            <b>Nội dung</b>\r\n          </label>\r\n          <div className=\"aroundEditorQuestion\" id=\"aroundEditorQuestion\">\r\n            <Editor\r\n              editorState={editorStates}\r\n              wrapperClassName=\"demo-wrapper\"\r\n              editorClassName=\"demo-editor\"\r\n              onEditorStateChange={setEdittorStates}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"questionTag\">\r\n              <b>Thẻ</b>\r\n            </label>\r\n            {/* <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"questionTag\"\r\n              aria-describedby=\"questionTag\"\r\n              placeholder=\"Nhập thẻ liên quan đến câu hỏi...\"\r\n              defaultValue={question.tag}\r\n              onChange={(e) => {\r\n                setTag(e.target.value);\r\n              }}\r\n            /> */}\r\n            <CategoriesInput />\r\n          </div>\r\n          <div className=\"aroundBtnQuestion\">\r\n            <input type=\"submit\" className=\"btn btn-success\" value=\"Đăng\" />\r\n          </div>\r\n        </div>\r\n      </form>\r\n      <Dialog\r\n        onClose={handleClose}\r\n        aria-labelledby=\"customized-dialog-title\"\r\n        open={open}\r\n      >\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          Post Successfully\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <Typography gutterBottom>{nofi}</Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            OK\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuestionForm;\r\n","E:\\foofaq\\src\\components\\CategoriesInput\\index.js",[],{"ruleId":"44","severity":1,"message":"45","line":47,"column":6,"nodeType":"46","endLine":47,"endColumn":8,"suggestions":"47"},{"ruleId":"48","severity":1,"message":"49","line":3,"column":10,"nodeType":"50","messageId":"51","endLine":3,"endColumn":20},{"ruleId":"48","severity":1,"message":"52","line":9,"column":8,"nodeType":"50","messageId":"51","endLine":9,"endColumn":13},{"ruleId":"48","severity":1,"message":"53","line":10,"column":8,"nodeType":"50","messageId":"51","endLine":10,"endColumn":14},{"ruleId":"48","severity":1,"message":"54","line":87,"column":10,"nodeType":"50","messageId":"51","endLine":87,"endColumn":13},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["55"],"no-unused-vars","'makeStyles' is defined but never used.","Identifier","unusedVar","'Paper' is defined but never used.","'Button' is defined but never used.","'tag' is assigned a value but never used.",{"desc":"56","fix":"57"},"Update the dependencies array to be: [id]",{"range":"58","text":"59"},[1318,1320],"[id]"]