[{"D:\\core_foo\\foofaq\\src\\index.js":"1","D:\\core_foo\\foofaq\\src\\pages\\QuestionManager\\index.js":"2","D:\\core_foo\\foofaq\\src\\components\\FormManager\\User.js":"3","D:\\core_foo\\foofaq\\src\\helpers\\userAPI.js":"4","D:\\core_foo\\foofaq\\src\\components\\NavigationBar\\index.js":"5","D:\\core_foo\\foofaq\\src\\components\\UserDetailStoryFirst\\UserSaveStory\\index.js":"6","D:\\test3\\foofaq\\src\\reducers\\index.js":"7","D:\\test3\\foofaq\\src\\components\\UserManager\\index.js":"8","D:\\test3\\foofaq\\src\\common\\CustomLink.js":"9","D:\\test3\\foofaq\\src\\components\\SearchBar\\index.js":"10","D:\\test3\\foofaq\\src\\components\\HeaderAsideNavbar\\index.js":"11","D:\\test3\\foofaq\\src\\pages\\QuestionManager\\index.js":"12","D:\\test3\\foofaq\\src\\components\\FormManager\\User.js":"13","D:\\test3\\foofaq\\src\\index.js":"14","D:\\test3\\foofaq\\src\\pages\\FormManager\\index.js":"15"},{"size":1284,"mtime":1608108625373,"results":"16","hashOfConfig":"17"},{"size":564,"mtime":1608108456637,"results":"18","hashOfConfig":"17"},{"size":3955,"mtime":1608105533754,"results":"19","hashOfConfig":"17"},{"size":1345,"mtime":1608105533759,"results":"20","hashOfConfig":"17"},{"size":7824,"mtime":1607997896373,"results":"21","hashOfConfig":"17"},{"size":513,"mtime":1608108606955,"results":"22","hashOfConfig":"17"},{"size":168,"mtime":1608653006206,"results":"23","hashOfConfig":"24"},{"size":4752,"mtime":1609148465713,"results":"25","hashOfConfig":"24"},{"size":497,"mtime":1608653006192,"results":"26","hashOfConfig":"24"},{"size":530,"mtime":1608653006198,"results":"27","hashOfConfig":"24"},{"size":4983,"mtime":1608653255246,"results":"28","hashOfConfig":"24"},{"size":684,"mtime":1609148414000,"results":"29","hashOfConfig":"24"},{"size":4376,"mtime":1609114948340,"results":"30","hashOfConfig":"24"},{"size":848,"mtime":1609148558968,"results":"31","hashOfConfig":"24"},{"size":580,"mtime":1609148508903,"results":"32","hashOfConfig":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1azhiz9",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"lxqyjr",{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\core_foo\\foofaq\\src\\index.js",[],"D:\\core_foo\\foofaq\\src\\pages\\QuestionManager\\index.js",[],"D:\\core_foo\\foofaq\\src\\components\\FormManager\\User.js",["66"],"D:\\core_foo\\foofaq\\src\\helpers\\userAPI.js",[],"D:\\core_foo\\foofaq\\src\\components\\NavigationBar\\index.js",[],"D:\\core_foo\\foofaq\\src\\components\\UserDetailStoryFirst\\UserSaveStory\\index.js",[],"D:\\test3\\foofaq\\src\\reducers\\index.js",[],"D:\\test3\\foofaq\\src\\components\\UserManager\\index.js",["67"],"import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport { TableH, TableB } from \"../../components/QuestionTable\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Link from \"../../common/CustomLink\";\r\nimport HeaderAsideNavbar from \"../../components/HeaderAsideNavbar\";\r\nimport SearchBar from \"../../components/SearchBar\";\r\nimport { getAllUser,getUserLimit, declineUser } from \"../../helpers/userAPI\";\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  tablePa: {\r\n    marginTop: \"50px\",\r\n    marginRight: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n  btnadd: {\r\n    marginTop: \"20px\",\r\n  },\r\n  pagination: {\r\n    margin: \"20px auto\",\r\n    marginLeft: \"25%\",\r\n  },\r\n});\r\n\r\nfunction Index(props) {\r\n  const classes = useStyles();\r\n  const [keyword, setKeyword] = useState(\"\");\r\n  const [questions, setQuestion] = useState([]);\r\n  const [open, setOpen] = useState(false);\r\n  const [page, setPage] = useState(1);\r\n  const [pagQuestion, setPagQuestion] = useState([]);\r\n  const [key, setKey] = useState(\"\");\r\n  let perPage = 5;\r\n  let count = parseInt(pagQuestion.length) / perPage;\r\n\r\n  const handleChange = (event, value) => {\r\n    setPage(value);\r\n  };\r\n  console.log(Math.ceil(count));\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const questionData = await getAllUser();\r\n      setPagQuestion(questionData);\r\n    })();\r\n  }, []);\r\n  useEffect(() => {\r\n    (async () => {\r\n      const questionData = await getUserLimit(key, page, perPage);\r\n      setQuestion(questionData);\r\n    })();\r\n  }, [key, page, perPage]);\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n  const DeleteQuestion = (id) => {\r\n    var answer = window.confirm(\"you definitely want to delete \");\r\n    if (answer) {\r\n      declineUser(id)\r\n        .then(function (response) {\r\n          // handle success\r\n          console.log(\"Successfully\");\r\n          setOpen(true);\r\n          window.location.reload();\r\n        })\r\n        .catch(function (error) {\r\n          // handle error\r\n          setOpen(false);\r\n        });\r\n    } else {\r\n      return;\r\n    }\r\n  };\r\n\r\n  const handleChangeSearch = (e) => {\r\n    setKeyword(e.target.value);\r\n  };\r\n  const handleSearch = () => {\r\n    setKey(keyword);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1> User Manager </h1>\r\n      <SearchBar\r\n        handleChangeSearch={handleChangeSearch}\r\n        handleSearch={handleSearch}\r\n      ></SearchBar>\r\n      <Link to=\"/manager/add-user\">\r\n        {\" \"}\r\n        <Button className={classes.btnadd} variant=\"contained\" color=\"primary\">\r\n          Add\r\n        </Button>\r\n      </Link>\r\n      <TableContainer className={classes.tablePa} component={Paper}>\r\n        <Table className={classes.table} aria-label=\"simple table\">\r\n          <TableH\r\n            tt_id=\"#ID\"\r\n            tt_title=\"USERNAME\"\r\n            tt_update=\"UPDATE\"\r\n            tt_delete=\"DELETE\"\r\n          ></TableH>\r\n          {questions.map((question) => (\r\n            <TableB\r\n              key={question.id}\r\n              key_id={question.id}\r\n              id={question.id}\r\n              title={question.user_name}\r\n              update={\r\n                <Link to={\"/manager/edit/\" + question.id}>\r\n                  <Button variant=\"contained\" color=\"primary\">\r\n                    {\" \"}\r\n                    Update{\" \"}\r\n                  </Button>\r\n                </Link>\r\n              }\r\n              delete={\r\n                <Button\r\n                  onClick={() => {\r\n                    DeleteQuestion(question.id);\r\n                  }}\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                >\r\n                  {\" \"}\r\n                  Delete{\" \"}\r\n                </Button>\r\n              }\r\n            ></TableB>\r\n          ))}\r\n        </Table>\r\n      </TableContainer>\r\n\r\n      <Pagination\r\n        className={classes.pagination}\r\n        count={Math.ceil(count)}\r\n        variant=\"outlined\"\r\n        shape=\"rounded\"\r\n        onChange={handleChange}\r\n        page={page}\r\n        siblingCount={1}\r\n        boundaryCount={1}\r\n      />\r\n      <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"success\">\r\n          Delete success!\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Index;\r\n","D:\\test3\\foofaq\\src\\common\\CustomLink.js",[],"D:\\test3\\foofaq\\src\\components\\SearchBar\\index.js",[],"D:\\test3\\foofaq\\src\\components\\HeaderAsideNavbar\\index.js",[],"D:\\test3\\foofaq\\src\\pages\\QuestionManager\\index.js",[],"D:\\test3\\foofaq\\src\\components\\FormManager\\User.js",["68"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { getUser, AddUser, UpdateUser } from \"../../helpers/userAPI\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  input: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: \"25ch\",\r\n  },\r\n  button: {\r\n    margin: \"10px auto\",\r\n  },\r\n}));\r\n\r\nfunction UserForm(props) {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const classes = useStyles();\r\n  const [user, setUser] = useState([]);\r\n  const [user_name, setName] = useState(\"\");\r\n  const [user_email, setEmail] = useState(\"\");\r\n  const [user_password, setPassword] = useState(\"\");\r\n  let { id } = useParams();\r\n\r\n  let handleSubmit = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n  useEffect(() => {\r\n    (async () => {\r\n      const user = await getUser(id);\r\n      setUser(user);\r\n      console.log(\"day ka L \", user);\r\n    })();\r\n  }, []);\r\n  if (id === undefined) {\r\n    handleSubmit = (event) => {\r\n      event.preventDefault();\r\n      AddUser(id, user_email, user_password, user_name)\r\n        .then(function (response) {\r\n          setOpen(true);\r\n          window.location.reload();\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    };\r\n  } else {\r\n    handleSubmit = (event) => {\r\n      event.preventDefault();\r\n      UpdateUser(id, user_name, user_password,user_email)\r\n        .then(function (response) {\r\n          setOpen(true);\r\n          window.location.reload();\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    };\r\n  }\r\n  console.log(user.user_name);\r\n\r\n  return (\r\n    <div>\r\n      <h1> User Form</h1>\r\n\r\n      <div className={classes.root}>\r\n        <form>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"exampleInputName\">Name</label>\r\n            <input\r\n              \r\n              className=\"form-control\"\r\n              aria-describedby=\"namelHelp\"\r\n              placeholder=\"Name...\"\r\n              onChange={(e) => {\r\n                setName(e.target.value);\r\n              }}\r\n              defaultValue={user.user_name}\r\n            />\r\n\r\n            <small id=\"emailHelp\" className=\"form-text text-muted\">\r\n              We'll never share your name with anyone else.\r\n            </small>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"exampleInputPassword1\">Password</label>\r\n            <input\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              id=\"exampleInputPassword1\"\r\n              placeholder=\"Password...\"\r\n              onChange={(e) => {\r\n                setPassword(e.target.value);\r\n              }}\r\n              defaultValue={user.user_password}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"exampleInputEmail1\">Email address</label>\r\n            <input\r\n              type=\"email\"\r\n              className=\"form-control\"\r\n             \r\n              aria-describedby=\"emailHelp\"\r\n              placeholder=\"email....\"\r\n              onChange={(e) => {\r\n                setEmail(e.target.value);\r\n              }}\r\n              defaultValue={user.user_email}\r\n              variant=\"outlined\"\r\n            />\r\n            <small id=\"emailHelp\" className=\"form-text text-muted\">\r\n              We'll never share your email with anyone else.\r\n            </small>\r\n          </div>\r\n          <Button\r\n            onClick={handleSubmit}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.button}\r\n          >\r\n            Send\r\n          </Button>\r\n        \r\n        </form>\r\n      </div>\r\n      <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"success\">\r\n          This is a success message!\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserForm;\r\n",["69","70"],"D:\\test3\\foofaq\\src\\index.js",[],"D:\\test3\\foofaq\\src\\pages\\FormManager\\index.js",[],{"ruleId":"71","severity":1,"message":"72","line":48,"column":6,"nodeType":"73","endLine":48,"endColumn":8,"suggestions":"74"},{"ruleId":"75","severity":1,"message":"76","line":12,"column":8,"nodeType":"77","messageId":"78","endLine":12,"endColumn":25},{"ruleId":"71","severity":1,"message":"72","line":49,"column":6,"nodeType":"73","endLine":49,"endColumn":8,"suggestions":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["84"],"no-unused-vars","'HeaderAsideNavbar' is defined but never used.","Identifier","unusedVar",["85"],"no-native-reassign",["86"],"no-negated-in-lhs",["87"],{"desc":"88","fix":"89"},{"desc":"88","fix":"90"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [id]",{"range":"91","text":"92"},{"range":"93","text":"92"},[1344,1346],"[id]",[1329,1331]]